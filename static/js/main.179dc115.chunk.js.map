{"version":3,"sources":["components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","components/Dialogs/Message/Message.module.css","components/common/pagination/Pagination.module.css","components/Users/Users.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","api/api.ts","reportWebVitals.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/store.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","utils/validators/validators.tsx","components/common/formsControls/FormsControls.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/pagination/Pagination.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/Users.tsx","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","assets/images/Logo_header.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/common/formsControls/FormsControls.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","App.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css"],"names":["module","exports","ResponseStatuses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","followUsers","userId","post","unfollowUsers","delete","profileAPI","status","put","authAPI","email","password","rememberMe","captcha","initialState","postsData","id","v1","message","likesCount","profile","setStatus","type","dialogsData","name","messagesData","messageContent","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","value","toggleIsFollowingProgress","inProgress","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","data","resultCode","success","login","isAuth","setAuthUserData","payload","getAuthUserData","res","initialized","rootReducer","combineReducers","profilePage","state","action","newPostText","filter","p","postId","dialogsPage","newMessageText","m","messageId","sidebar","usersPage","map","u","followed","totalCount","auth","app","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","News","news","Music","music","Settings","settings","Message","DialogItem","path","src","alt","requiredField","maxLengthCreator","maxLength","length","FormControl","props","meta","touched","error","children","hasError","formControl","Textarea","input","restProps","Input","maxLength50","AddMessageReduxForm","reduxForm","handleSubmit","onSubmit","Field","textarea","placeholder","component","validate","mapStateToProps","withAuthRedirect","Component","connect","DialogsContainer","stateDialogsPage","addMessage","dialogsElements","d","messagesElements","dialogs","dialogsItem","messagesItem","formData","Pagination","onPageChanged","pagesCount","Math","ceil","pages","i","push","selectedPage","onClick","e","User","user","follow","unfollow","photos","small","userPhoto","disabled","some","Users","Preloader","preloader","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","requestUsers","this","bind","page","items","ProfileStatusWithHooks","updateUserStatus","useState","editMode","setEditMode","statusValue","setStatusValue","useEffect","onDoubleClick","autoFocus","onBlur","onChange","currentTarget","ProfileInfo","profileInfo","descriptionBlock","large","Post","maxLength10","MyPosts","memo","addPost","postsElements","myPosts","AddPostReduxForm","button","MyPostsContainer","Profile","ProfileContainer","match","authorizedUserId","history","getUserProfile","getUserStatus","params","JSON","stringify","withRouter","Header","logout","header","LogoForHeader","loginBlock","HeaderContainer","LoginReduxForm","formSummaryError","messages","stopSubmit","_error","App","initializeApp","appWrapper","appWrapperContent","exact","render","promise","Promise","all","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.179dc115.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__1E9ra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__P7Nrm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__hPAd8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1jjej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagination_selectedPage__2L2RV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__Sr8R7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1AFhw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__6-fH1\",\"item\":\"Navbar_item__3Ldnh\",\"activeLink\":\"Navbar_activeLink__uFs2O\"};","import axios from 'axios';\r\nimport {ProfileType} from '../redux/profile-reducer';\r\nimport {UsersType} from '../redux/users-reducer';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'a53e0f65-c3ac-4834-99fc-a88db669947f',\r\n    },\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n    followUsers(userId: string) {\r\n        return instance.post<CommonResponseType>(`follow/${userId}`)\r\n    },\r\n    unfollowUsers(userId: string) {\r\n        return instance.delete<CommonResponseType>(`follow/${userId}`)\r\n    },\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`/profile/status`, {status})\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<CommonResponseType<GetAuthUserData>>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: boolean) {\r\n        return instance.post<CommonResponseType<{ userId: string }>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n    },\r\n}\r\n\r\n//types\r\nexport enum ResponseStatuses {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\n\r\ntype GetUsersType = {\r\n    items: UsersType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\ntype GetAuthUserData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {v1} from 'uuid';\r\nimport {AppThunkType} from './store';\r\nimport {profileAPI} from '../api/api';\r\n\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'Hello', likesCount: 11},\r\n        {id: v1(), message: 'Buy', likesCount: 15},\r\n        {id: v1(), message: 'How are you?', likesCount: 7},\r\n        {id: v1(), message: 'I am fine, and you?', likesCount: 5},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profilePage/ADD-POST':\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData,\r\n                    {id: v1(), message: action.newPostText, likesCount: 0}\r\n                ],\r\n            }\r\n        case 'profilePage/SET-USER-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'profilePage/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'profilePage/REMOVE-POST':\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData.filter(p => p.id !== action.postId)\r\n                ],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const addPost = (newPostText: string) =>\r\n    ({type: 'profilePage/ADD-POST', newPostText} as const)\r\n\r\nexport const setUserProfile = (profile: ProfileType | null) =>\r\n    ({type: 'profilePage/SET-USER-PROFILE', profile} as const)\r\n\r\nexport const setStatus = (status: string) =>\r\n    ({type: 'profilePage/SET-STATUS', status} as const)\r\n\r\nexport const removePost = (postId: string) =>\r\n    ({type: 'profilePage/REMOVE-POST', postId} as const)\r\n\r\n\r\n//thunks\r\nexport const getUserProfile = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const res = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(res.data))\r\n    }\r\n\r\nexport const getUserStatus = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const res = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(res.data))\r\n    }\r\n\r\nexport const updateUserStatus = (status: string): AppThunkType =>\r\n    async dispatch => {\r\n        const res = await profileAPI.updateStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\nexport type SetStatusActionType = ReturnType<typeof setStatus>\r\nexport type RemovePostActionType = ReturnType<typeof removePost>\r\n\r\nexport type ProfileActionsType =\r\n    | AddPostActionType\r\n    | SetUserProfileActionType\r\n    | SetStatusActionType\r\n    | RemovePostActionType","import {v1} from 'uuid';\r\n\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: v1(), name: 'Marta'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Vera'},\r\n        {id: v1(), name: 'Anton'},\r\n        {id: v1(), name: 'Vanya'},\r\n    ] as Array<DialogItemType>,\r\n    messagesData: [\r\n        {id: v1(), messageContent: 'Hello'},\r\n        {id: v1(), messageContent: 'How are you?'},\r\n        {id: v1(), messageContent: 'Yo'},\r\n    ] as Array<MessageItemType>,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: DialogsActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'dialogsPage/ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [\r\n                    ...state.messagesData,\r\n                    {id: v1(), messageContent: action.newMessageText}\r\n                ],\r\n            }\r\n        case 'dialogsPage/REMOVE-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [\r\n                    ...state.messagesData.filter(m => m.id !== action.messageId)\r\n                ],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const addMessage = (newMessageText: string) =>\r\n    ({type: 'dialogsPage/ADD-MESSAGE', newMessageText} as const)\r\n\r\nexport const removeMessage = (messageId: string) =>\r\n    ({type: 'dialogsPage/REMOVE-MESSAGE', messageId} as const)\r\n\r\n\r\n//types\r\nexport type MessageItemType = {\r\n    id?: string\r\n    messageContent: string\r\n}\r\nexport type DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type AddMessageActionType = ReturnType<typeof addMessage>\r\nexport type RemoveMessageActionType = ReturnType<typeof removeMessage>\r\nexport type DialogsActionsType =\r\n    | AddMessageActionType\r\n    | RemoveMessageActionType","export type SidebarActionsType = ReturnType<any>\r\n\r\n\r\nconst initialState = {}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const sidebarReducer = (state: InitialStateType = initialState, action: SidebarActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'sidebar/':\r\n            return {\r\n                ...state,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {ResponseStatuses, usersAPI} from '../api/api';\r\nimport {AppThunkType} from './store';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\nconst initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as string[],\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: UsersActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'usersPage/FOLLOW':\r\n            return {\r\n                ...state,\r\n                // users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'usersPage/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                // users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'usersPage/SET-USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'usersPage/SET-CURRENT-PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'usersPage/SET-TOTAL-USERS-COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case 'usersPage/TOGGLE-IS-FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.value\r\n            }\r\n        case 'usersPage/TOGGLE-IS-FOLLOWING-PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress:\r\n                    action.inProgress\r\n                        ? [...state.followingInProgress, action.userId]\r\n                        : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const followSuccess = (userId: string) =>\r\n    ({type: 'usersPage/FOLLOW', userId} as const)\r\n\r\nexport const unfollowSuccess = (userId: string) =>\r\n    ({type: 'usersPage/UNFOLLOW', userId} as const)\r\n\r\nexport const setUsers = (users: Array<UsersType>) =>\r\n    ({type: 'usersPage/SET-USERS', users} as const)\r\n\r\nexport const setCurrentPage = (currentPage: number) =>\r\n    ({type: 'usersPage/SET-CURRENT-PAGE', currentPage} as const)\r\n\r\nexport const setTotalUsersCount = (totalCount: number) =>\r\n    ({type: 'usersPage/SET-TOTAL-USERS-COUNT', totalCount} as const)\r\n\r\nexport const toggleIsFetching = (value: boolean) =>\r\n    ({type: 'usersPage/TOGGLE-IS-FETCHING', value} as const)\r\n\r\nexport const toggleIsFollowingProgress = (inProgress: boolean, userId: string) =>\r\n    ({type: 'usersPage/TOGGLE-IS-FOLLOWING-PROGRESS', inProgress, userId} as const)\r\n\r\n\r\n//thunks\r\nexport const requestUsers = (page: number, pageSize: number): AppThunkType =>\r\n    async dispatch => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        const res = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(res.data.items))\r\n        dispatch(setTotalUsersCount(res.data.totalCount))\r\n    }\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<UsersActionsType>, userId: string, apiMethod: any, actionCreator: (userId: string) => FollowSuccessActionType | UnfollowSuccessActionType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    const res = await apiMethod(userId)\r\n    if (res.data.resultCode === ResponseStatuses.success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const apiMethod = usersAPI.followUsers.bind(usersAPI)\r\n        _followUnfollowFlow(dispatch, userId, apiMethod, followSuccess)\r\n    }\r\n\r\nexport const unfollow = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const apiMethod = usersAPI.unfollowUsers.bind(usersAPI)\r\n        _followUnfollowFlow(dispatch, userId, apiMethod, unfollowSuccess)\r\n    }\r\n\r\n//types\r\nexport type UsersType = {\r\n    id: string\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    uniqueUrlName: string | null\r\n    location?: {\r\n        city: string\r\n        country: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type FollowSuccessActionType = ReturnType<typeof followSuccess>\r\nexport type UnfollowSuccessActionType = ReturnType<typeof unfollowSuccess>\r\nexport type SetUsersActionType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleIsFollowingProgressActionType = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport type UsersActionsType =\r\n    | FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | ToggleIsFollowingProgressActionType","import {authAPI, ResponseStatuses} from '../api/api';\r\nimport {AppThunkType} from './store';\r\nimport {stopSubmit} from 'redux-form';\r\n\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: false,\r\n    isAuth: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'auth/SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, captcha: boolean, isAuth: boolean) =>\r\n    ({type: 'auth/SET-USER-DATA', payload: {userId, email, login, captcha, isAuth}} as const)\r\n\r\n\r\n//thunks\r\nexport const getAuthUserData = (): AppThunkType => async dispatch => {\r\n    const res = await authAPI.authMe()\r\n    if (res.data.resultCode === ResponseStatuses.success) {\r\n        let {id, email, login} = res.data.data\r\n        dispatch(setAuthUserData(id, email, login, true, true))\r\n    }\r\n    return res\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: boolean): AppThunkType => async dispatch => {\r\n    const res = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (res.data.resultCode === ResponseStatuses.success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (res.data.messages.length) {\r\n            dispatch(stopSubmit('login', {_error: res.data.messages[0]}))\r\n        } else {\r\n            dispatch(stopSubmit('login', {_error: 'Some error'}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n    const res = await authAPI.logout()\r\n    if (res.data.resultCode === ResponseStatuses.success) {\r\n        dispatch(setAuthUserData(null, null, null, false, false))\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type SetAuthUserDataActionType = ReturnType<typeof setAuthUserData>\r\nexport type AuthActionsType = SetAuthUserDataActionType","import {AppThunkType} from './store';\r\nimport {getAuthUserData} from './auth-reducer';\r\n\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: InitializedAppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'app/INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const initializedSuccess = () => ({type: 'app/INITIALIZED-SUCCESS'} as const)\r\n\r\n\r\n//thunks\r\nexport const initializeApp = (): AppThunkType => async dispatch => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type InitializedSuccessActionType = ReturnType<typeof initializedSuccess>\r\nexport type InitializedAppActionsType = InitializedSuccessActionType","import {applyMiddleware, combineReducers, createStore, compose} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {ProfileActionsType, profileReducer} from './profile-reducer';\r\nimport {DialogsActionsType, dialogsReducer} from './dialogs-reducer';\r\nimport {SidebarActionsType, sidebarReducer} from './sidebar-reducer';\r\nimport {UsersActionsType, usersReducer} from './users-reducer';\r\nimport {AuthActionsType, authReducer} from './auth-reducer';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer, InitializedAppActionsType} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport type AppActionsType =\r\n    | AuthActionsType\r\n    | DialogsActionsType\r\n    | ProfileActionsType\r\n    | SidebarActionsType\r\n    | UsersActionsType\r\n    | InitializedAppActionsType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\n//@ts-ignore\r\nwindow.__store__ = store\r\n","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Navbar.module.css'\r\n\r\nexport const Navbar:FC = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport s from './News.module.css'\r\n\r\n\r\nexport const News: FC = () => {\r\n    return (\r\n        <div className={s.news}>\r\n            News\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport s from './Music.module.css'\r\n\r\n\r\nexport const Music: FC = () => {\r\n    return (\r\n        <div className={s.music}>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport s from './Settings.module.css'\r\n\r\n\r\nexport const Settings: FC = () => {\r\n    return (\r\n        <div className={s.settings}>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport s from './Message.module.css'\r\nimport {MessageItemType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nexport const Message: FC<MessageItemType> = ({messageContent}) => {\r\n\r\n    return (\r\n        <div className={s.message}>{messageContent}</div>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogItem.module.css'\r\nimport {DialogItemType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nexport const DialogItem: FC<DialogItemType> = ({id, name}) => {\r\n    const path = '/dialogs/' + id\r\n\r\n    return (\r\n        <div className={`${s.item} ${s.activeLink}`}>\r\n            <NavLink to={path}>\r\n                <img src=\"https://avatars.mds.yandex.net/get-pdb/1025945/a6f96698-c78d-44fb-b802-38e74e0164dd/s1200\" alt={''}/>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","export const requiredField = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React, {FC} from 'react'\r\nimport {WrappedFieldProps} from 'redux-form/lib/Field';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\nconst FormControl: FC<WrappedFieldProps> = props => {\r\n    const {meta: {touched, error}, children} = props\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError && s.error)}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React, {FC} from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport s from '../Dialogs.module.css';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n\r\nexport const AddMessageForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={s.textarea}\r\n                    placeholder='Enter your message'\r\n                    name='newMessageText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n//types\r\nexport type FormDataType = {\r\n    newMessageText: string\r\n}","import React, {FC} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsType} from './DialogsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddMessageForm, FormDataType} from './Message/AddMessageForm';\r\n\r\n\r\nexport const Dialogs: FC<DialogsType> = ({stateDialogsPage, addMessage}) => {\r\n\r\n    const dialogsElements = stateDialogsPage.dialogsData.map(d => <DialogItem\r\n        key={d.id} name={d.name}\r\n        id={d.id}/>)\r\n    const messagesElements = stateDialogsPage.messagesData.map(m => <Message\r\n        key={m.id}\r\n        messageContent={m.messageContent}/>)\r\n\r\n\r\n    const onClickAddMessage = (formData: FormDataType) => {\r\n        addMessage(formData.newMessageText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messagesItem}>\r\n                {messagesElements}\r\n                <AddMessageReduxForm onSubmit={onClickAddMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'addMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","import {addMessage, InitialStateType} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ComponentType} from 'react';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        stateDialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {addMessage,}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    stateDialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\nexport type DialogsType = MapStateToPropsType & MapDispatchToPropsType","import React, {FC} from 'react';\r\nimport s from './Pagination.module.css';\r\n\r\n\r\nexport const Pagination: FC<UsersPropsType> = (props) => {\r\n\r\n    const {totalUsersCount, currentPage, pageSize, onPageChanged} = props\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                pages.map(p => {\r\n                    return (\r\n                        <span key={p} className={currentPage === p ? s.selectedPage : ''}\r\n                              onClick={e => onPageChanged(p)}>\r\n                                {p}\r\n                            </span>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n}","export default __webpack_public_path__ + \"static/media/user.4409fc97.png\";","import React, {FC} from 'react';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport s from './Users.module.css';\r\nimport {UsersType} from '../../redux/users-reducer';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nexport const User: FC<UserPropsType> = (props) => {\r\n\r\n    const {user, followingInProgress, follow, unfollow} = props\r\n\r\n    const onClickFollow = () => follow(user.id)\r\n    const onClickUnFollow = () => unfollow(user.id)\r\n\r\n    return (\r\n        <>\r\n            <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + user.id}>\r\n                                <img src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                                     className={s.userPhoto} alt={''}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                user.followed\r\n                                    ?\r\n                                    <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                            onClick={onClickUnFollow}>unFollow</button>\r\n                                    : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                              onClick={onClickFollow}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n            <span>\r\n                        <div>\r\n                            {user.name}\r\n                        </div>\r\n                        <div>\r\n                            {user.status}\r\n                        </div>\r\n                    </span>\r\n            <span>\r\n                            <div>{'u.location.country'}</div>\r\n                            <div>{'u.location.city'}</div>\r\n                    </span>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype UserPropsType = {\r\n    user: UsersType\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    followingInProgress: string[]\r\n}","import React, {FC} from 'react';\r\nimport {UsersType} from '../../redux/users-reducer';\r\nimport {Pagination} from '../common/pagination/Pagination';\r\nimport {User} from './User';\r\n\r\n\r\nexport const Users: FC<UsersPropsType> = (props) => {\r\n\r\n    const {totalUsersCount, users, currentPage, pageSize, followingInProgress, follow, onPageChanged, unfollow} = props\r\n\r\n    return (\r\n        <div>\r\n            <Pagination currentPage={currentPage}\r\n                        onPageChanged={onPageChanged}\r\n                        pageSize={pageSize}\r\n                        totalUsersCount={totalUsersCount}/>\r\n            <div>\r\n                {\r\n                    users.map(user => <User key={user.id}\r\n                                            user={user}\r\n                                            followingInProgress={followingInProgress}\r\n                                            follow={follow}\r\n                                            unfollow={unfollow}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersType>\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    followingInProgress: string[]\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: string) => void\r\n}","export default __webpack_public_path__ + \"static/media/preloader.5665744c.svg\";","import React, {FC} from 'react';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nexport const Preloader: FC = () => {\r\n    return <>\r\n        <img src={preloader} alt={''}/>\r\n    </>\r\n}","import {AppStateType} from './store';\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    requestUsers,\r\n    setCurrentPage,\r\n    toggleIsFollowingProgress,\r\n    unfollow,\r\n    UsersType\r\n} from '../../redux/users-reducer';\r\nimport {AppStateType} from '../../redux/store';\r\nimport React, {Component, ComponentType} from 'react';\r\nimport {Users} from './Users';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\nimport {compose} from 'redux';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from '../../redux/users-selectors';\r\n\r\n\r\nclass UsersContainer extends Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        const {requestUsers, currentPage, pageSize} = this.props\r\n        requestUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {requestUsers, pageSize} = this.props\r\n        requestUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        requestUsers,\r\n    }),\r\n    //withAuthRedirect\r\n)(UsersContainer)\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: string[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: string) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\n\r\n\r\nexport const ProfileStatusWithHooks: FC<PropsType> = ({status, updateUserStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [statusValue, setStatusValue] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setStatusValue(status)\r\n    }, [status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(statusValue)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{`🖊️ ${status} `}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus\r\n                        value={statusValue}\r\n                        onBlur={deactivateEditMode}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\n\r\nexport const ProfileInfo: FC<PropsType> = ({profile, status, updateUserStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img\r\n                    src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                    alt={''}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={profile.photos.large} alt={''}/>\r\n                <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: FC<PropsType> = ({message, likesCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg\" alt={''}/>\r\n            {message}\r\n            <div>\r\n                <span>{likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React, {FC} from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\n\r\nexport type FormDataType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nexport const AddPostForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='enter text'\r\n                    name='newPostText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {FC, memo} from 'react'\r\nimport {Post} from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddPostForm, FormDataType} from './AddPostForm';\r\n\r\n\r\nexport const MyPosts: FC<MyPostsType> = memo(({postsData, addPost}) => {\r\n\r\n    const postsElements = postsData.map(p =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onClickAddPost = (formData: FormDataType) => {\r\n        addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onClickAddPost}/>\r\n\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'addPostForm'})(AddPostForm)\r\n","import {addPost, PostType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n})(MyPosts)\r\n\r\n\r\n//types\r\nexport type MapStateToPropsType = {\r\n    postsData: Array<PostType>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\nexport const Profile: FC<PropsType> = ({profile, updateUserStatus, status}) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {Component, ComponentType} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus,} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {match, authorizedUserId, history, getUserProfile, getUserStatus} = this.props\r\n        let userId = match.params.userId\r\n        if (!userId) {\r\n            userId = JSON.stringify(authorizedUserId)\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profile}>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//types\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n","export default __webpack_public_path__ + \"static/media/Logo_header.8aaf41b6.png\";","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport LogoForHeader from '../../assets/images/Logo_header.png';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nexport const Header: FC<PropsType> = ({isAuth, login, logout}) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src={LogoForHeader} alt={''}/>\r\n            <div className={s.loginBlock}>\r\n                {isAuth\r\n                    ? <div>{login} <button onClick={logout}>Log out</button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React, {Component} from 'react'\r\nimport {Header} from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {logout} from '../../redux/auth-reducer';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\nexport type HeaderPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n\r\nclass HeaderContainer extends Component<HeaderPropsType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React, {FC} from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/formsControls/FormsControls';\r\nimport {requiredField} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport s from '../common/formsControls/FormsControls.module.css'\r\n\r\n\r\nconst Login: FC<MapStateToPropsType & MapDispatchToPropsType> = props => {\r\n\r\n    const {login, isAuth, captcha, children} = props\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoginForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Email'}\r\n                    name={'email'}\r\n                    component={Input}\r\n                    validate={[requiredField]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                    validate={[requiredField]}\r\n                    type={'password'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    type=\"checkbox\"\r\n                    name=\"rememberMe\"\r\n                    component={Input}\r\n                /> remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    captcha: state.auth.captcha,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n//types\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: boolean\r\n}\r\ntype MapStateToPropsType = {\r\n    captcha: boolean | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: boolean) => void\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps, {login})(Login)","import React, {Component, ComponentType} from 'react'\r\nimport s from './App.module.css'\r\nimport {Navbar} from './components/Navbar/Navbar'\r\nimport {News} from './components/News/News';\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\nimport {Route, withRouter} from 'react-router-dom'\r\nimport {DialogsContainer} from './components/Dialogs/DialogsContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport {AppStateType} from './redux/store';\r\nimport {Preloader} from './components/common/Preloader/Preloader';\r\n\r\n\r\nclass App extends Component<AppPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={s.appWrapper}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className={s.appWrapperContent}>\r\n                    <Route exact path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                    <Route exact path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route exact path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    <Route exact path=\"/news\" render={() => <News/>}/>\r\n                    <Route exact path=\"/music\" render={() => <Music/>}/>\r\n                    <Route exact path=\"/settings\" render={() => <Settings/>}/>\r\n                    <Route exact path=\"/login\" render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    initialized: state.app.initialized,\r\n})\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\nexport type AppPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App)\r\n\r\n\r\n","import React from 'react'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Dn8Z\",\"dialogsItem\":\"Dialogs_dialogsItem__1NNkN\",\"textarea\":\"Dialogs_textarea__2IKdi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Z8L4\",\"error\":\"FormsControls_error__BtpDs\",\"formSummaryError\":\"FormsControls_formSummaryError__2qS17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__395W3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1Sq30\",\"button\":\"MyPosts_button__3kRgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1upY6\",\"appWrapperContent\":\"App_appWrapperContent__1w-fS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogItem_item__FOhNE\",\"activeLink\":\"DialogItem_activeLink__1OjsT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__26XEX\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2MG0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__tmv2U\",\"loginBlock\":\"Header_loginBlock__1H5dx\"};"],"sourceRoot":""}