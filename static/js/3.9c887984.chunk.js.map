{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","status","updateUserStatus","useState","editMode","setEditMode","statusValue","setStatusValue","useEffect","onDoubleClick","autoFocus","value","onBlur","onChange","e","currentTarget","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","formSummaryError","Field","placeholder","name","component","Input","validate","type","Textarea","Object","keys","contacts","map","key","contact","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","profileInfo","descriptionBlock","src","photos","large","userPhoto","alt","mainPhoto","target","files","photo","initialValues","formData","then","goToEditMode","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","Post","message","likesCount","item","maxLength10","maxLengthCreator","MyPosts","memo","postsData","addPost","postsElements","p","id","myPosts","AddPostReduxForm","newPostText","requiredField","button","MyPostsContainer","profilePage","Profile","ProfileContainer","this","match","authorizedUserId","history","getUserProfile","getUserStatus","userId","Number","params","push","refreshProfile","prevProps","prevState","compose","withRouter"],"mappings":"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","file":"static/js/3.9c887984.chunk.js","sourcesContent":["import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__395W3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1Sq30\",\"button\":\"MyPosts_button__3kRgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__26XEX\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2MG0-\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2e_wJ\",\"contact\":\"ProfileInfo_contact__2WHUC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1AFhw\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\n\r\n\r\nexport const ProfileStatusWithHooks: FC<PropsType> = ({status, updateUserStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [statusValue, setStatusValue] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setStatusValue(status)\r\n    }, [status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(statusValue)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={activateEditMode}>{`üñäÔ∏è ${status} `}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus\r\n                        value={statusValue}\r\n                        onBlur={deactivateEditMode}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {FC} from 'react';\r\nimport {ProfileType} from '../../../../redux/profile-reducer';\r\nimport {Input, Textarea} from '../../../common/formsControls/FormsControls';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport s from './../../../common/formsControls/FormsControls.module.css'\r\n\r\n\r\nexport const ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = props => {\r\n\r\n    const {handleSubmit, profile, error} = props\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n\r\n            <div>\r\n                <b>Full name</b>:\r\n                <Field\r\n                    placeholder={'Full name'}\r\n                    name={'fullName'}\r\n                    component={Input}\r\n                    validate={[]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                <Field\r\n                    name={'lookingForAJob'}\r\n                    component={Input}\r\n                    validate={[]}\r\n                    type={'checkbox'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                <Field\r\n                    placeholder={'My professional skills'}\r\n                    name={'lookingForAJobDescription'}\r\n                    component={Textarea}\r\n                    validate={[]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                <Field\r\n                    placeholder={'About me'}\r\n                    name={'aboutMe'}\r\n                    component={Textarea}\r\n                    validate={[]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}:\r\n                        <Field\r\n                            placeholder={key}\r\n                            name={'contacts.' + key}\r\n                            component={Input}\r\n                            validate={[]}\r\n                        />\r\n                    </b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ProfileType, ProfileDataFormPropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\n//types\r\nexport type ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}","import React, {ChangeEvent, FC, useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ContactsProfileType, ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport userPhoto from './../../../assets/images/user.png'\r\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm';\r\n\r\n\r\nexport const ProfileInfo: FC<PropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            const photo = e.target.files[0]\r\n            savePhoto(photo)\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} alt={''} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n\r\n\r\n                <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                isOwner && <div>\r\n                    <button onClick={goToEditMode}>edit</button>\r\n                </div>\r\n            }\r\n\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {\r\n                profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key}\r\n                                contactTitle={key}\r\n                                contactValue={profile.contacts[key as keyof ContactsProfileType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: FC<PropsType> = ({message, likesCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg\" alt={''}/>\r\n            {message}\r\n            <div>\r\n                <span>{likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React, {FC} from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\n\r\nexport type FormDataType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nexport const AddPostForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='enter text'\r\n                    name='newPostText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {FC, memo} from 'react'\r\nimport {Post} from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddPostForm, FormDataType} from './AddPostForm';\r\n\r\n\r\nexport const MyPosts: FC<MyPostsType> = memo(({postsData, addPost}) => {\r\n\r\n    const postsElements = postsData.map(p =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onClickAddPost = (formData: FormDataType) => {\r\n        addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onClickAddPost}/>\r\n\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'addPostForm'})(AddPostForm)\r\n","import {addPost, PostType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n})(MyPosts)\r\n\r\n\r\n//types\r\nexport type MapStateToPropsType = {\r\n    postsData: Array<PostType>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\nexport const Profile: FC<PropsType> = ({profile, updateUserStatus, status, isOwner, savePhoto, saveProfile}) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatus}\r\n                isOwner={isOwner}\r\n                savePhoto={savePhoto}\r\n                saveProfile={saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\n","import React, {Component, ComponentType} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    ProfileType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateUserStatus,\r\n} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        const {match, authorizedUserId, history, getUserProfile, getUserStatus} = this.props\r\n        let userId: number | null = Number(match.params.userId)\r\n        if (!userId) {\r\n            userId = authorizedUserId\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        if (userId) {\r\n            getUserProfile(userId)\r\n            getUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profile}>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//types\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n"],"sourceRoot":""}