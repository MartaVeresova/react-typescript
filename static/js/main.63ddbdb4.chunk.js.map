{"version":3,"sources":["components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","components/Dialogs/Message/Message.module.css","components/Users/Users.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/dialogs-reducer.ts","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","utils/validators/validators.tsx","components/common/formsControls/FormsControls.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","api/api.ts","components/Dialogs/DialogsContainer.tsx","utils/helpers/objectHelpers.tsx","redux/users-reducer.ts","components/common/pagination/Pagination.tsx","assets/images/user.png","components/Users/User.tsx","components/Users/Users.tsx","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","assets/images/Logo_header.png","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/store.ts","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/common/formsControls/FormsControls.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/common/pagination/Pagination.module.css","App.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","News","news","Music","music","Settings","settings","initialState","dialogsData","id","v1","name","messagesData","messageContent","Message","message","DialogItem","path","src","alt","requiredField","value","maxLengthCreator","maxLength","length","FormControl","props","meta","touched","error","children","hasError","formControl","Textarea","input","restProps","Input","maxLength50","AddMessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","textarea","placeholder","component","validate","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","ResponseStatuses","DialogsContainer","compose","stateDialogsPage","dialogsPage","addMessage","newMessageText","type","dialogsElements","map","d","messagesElements","m","dialogs","dialogsItem","messagesItem","formData","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","followUsers","userId","post","unfollowUsers","delete","profileAPI","status","put","authAPI","email","password","rememberMe","captcha","updateObjectInArray","items","itemId","newObjProps","u","followed","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleIsFollowingProgress","inProgress","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","data","resultCode","success","Pagination","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","useState","portionNumber","setPortionNumber","portionCount","leftPortionPageNumber","rightPortionPageNumber","pagination","onClick","filter","p","selectedPage","pageNumber","e","User","user","follow","unfollow","photos","small","userPhoto","disabled","some","Users","Preloader","preloader","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","this","bind","page","res","totalCount","ProfileStatusWithHooks","updateUserStatus","editMode","setEditMode","statusValue","setStatusValue","useEffect","onDoubleClick","autoFocus","onBlur","onChange","currentTarget","ProfileInfo","profile","profileInfo","descriptionBlock","large","postsData","likesCount","setStatus","Post","maxLength10","MyPosts","memo","addPost","postsElements","myPosts","AddPostReduxForm","newPostText","button","MyPostsContainer","profilePage","Profile","ProfileContainer","match","authorizedUserId","history","getUserProfile","getUserStatus","params","JSON","stringify","withRouter","Header","login","logout","header","LogoForHeader","loginBlock","setAuthUserData","payload","getAuthUserData","HeaderContainer","LoginReduxForm","formSummaryError","messages","stopSubmit","_error","initialized","rootReducer","combineReducers","action","postId","messageId","sidebar","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","App","initializeApp","appWrapper","appWrapperContent","exact","render","AppContainer","promise","Promise","all","SamuraiJSApp","StrictMode","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.63ddbdb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__1E9ra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__P7Nrm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__hPAd8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1jjej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__Sr8R7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1AFhw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__6-fH1\",\"item\":\"Navbar_item__3Ldnh\",\"activeLink\":\"Navbar_activeLink__uFs2O\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Navbar.module.css'\r\n\r\nexport const Navbar:FC = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport s from './News.module.css'\r\n\r\n\r\nexport const News: FC = () => {\r\n    return (\r\n        <div className={s.news}>\r\n            News\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport s from './Music.module.css'\r\n\r\n\r\nexport const Music: FC = () => {\r\n    return (\r\n        <div className={s.music}>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react';\r\nimport s from './Settings.module.css'\r\n\r\n\r\nexport const Settings: FC = () => {\r\n    return (\r\n        <div className={s.settings}>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import {v1} from 'uuid';\r\n\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: v1(), name: 'Marta'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Vera'},\r\n        {id: v1(), name: 'Anton'},\r\n        {id: v1(), name: 'Vanya'},\r\n    ] as Array<DialogItemType>,\r\n    messagesData: [\r\n        {id: v1(), messageContent: 'Hello'},\r\n        {id: v1(), messageContent: 'How are you?'},\r\n        {id: v1(), messageContent: 'Yo'},\r\n    ] as Array<MessageItemType>,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: DialogsActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'dialogsPage/ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [\r\n                    ...state.messagesData,\r\n                    {id: v1(), messageContent: action.newMessageText}\r\n                ],\r\n            }\r\n        case 'dialogsPage/REMOVE-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [\r\n                    ...state.messagesData.filter(m => m.id !== action.messageId)\r\n                ],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const addMessage = (newMessageText: string) =>\r\n    ({type: 'dialogsPage/ADD-MESSAGE', newMessageText} as const)\r\n\r\nexport const removeMessage = (messageId: string) =>\r\n    ({type: 'dialogsPage/REMOVE-MESSAGE', messageId} as const)\r\n\r\n\r\n//types\r\nexport type MessageItemType = {\r\n    id?: string\r\n    messageContent: string\r\n}\r\nexport type DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type AddMessageActionType = ReturnType<typeof addMessage>\r\nexport type RemoveMessageActionType = ReturnType<typeof removeMessage>\r\nexport type DialogsActionsType =\r\n    | AddMessageActionType\r\n    | RemoveMessageActionType","import React, {FC} from 'react'\r\nimport s from './Message.module.css'\r\nimport {MessageItemType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nexport const Message: FC<MessageItemType> = ({messageContent}) => {\r\n\r\n    return (\r\n        <div className={s.message}>{messageContent}</div>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogItem.module.css'\r\nimport {DialogItemType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nexport const DialogItem: FC<DialogItemType> = ({id, name}) => {\r\n    const path = '/dialogs/' + id\r\n\r\n    return (\r\n        <div className={`${s.item} ${s.activeLink}`}>\r\n            <NavLink to={path}>\r\n                <img src=\"https://avatars.mds.yandex.net/get-pdb/1025945/a6f96698-c78d-44fb-b802-38e74e0164dd/s1200\" alt={''}/>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","export const requiredField = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React, {FC} from 'react'\r\nimport {WrappedFieldProps} from 'redux-form/lib/Field';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\nconst FormControl: FC<WrappedFieldProps> = props => {\r\n    const {meta: {touched, error}, children} = props\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError && s.error)}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React, {FC} from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport s from '../Dialogs.module.css';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n\r\nexport const AddMessageForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={s.textarea}\r\n                    placeholder='Enter your message'\r\n                    name='newMessageText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n//types\r\nexport type FormDataType = {\r\n    newMessageText: string\r\n}","import React, {FC} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsType} from './DialogsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddMessageForm, FormDataType} from './Message/AddMessageForm';\r\n\r\n\r\nexport const Dialogs: FC<DialogsType> = ({stateDialogsPage, addMessage}) => {\r\n\r\n    const dialogsElements = stateDialogsPage.dialogsData.map(d => <DialogItem\r\n        key={d.id} name={d.name}\r\n        id={d.id}/>)\r\n    const messagesElements = stateDialogsPage.messagesData.map(m => <Message\r\n        key={m.id}\r\n        messageContent={m.messageContent}/>)\r\n\r\n\r\n    const onClickAddMessage = (formData: FormDataType) => {\r\n        addMessage(formData.newMessageText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messagesItem}>\r\n                {messagesElements}\r\n                <AddMessageReduxForm onSubmit={onClickAddMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'addMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","import axios from 'axios';\r\nimport {ProfileType} from '../redux/profile-reducer';\r\nimport {UsersType} from '../redux/users-reducer';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'a53e0f65-c3ac-4834-99fc-a88db669947f',\r\n    },\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n    followUsers(userId: string) {\r\n        return instance.post<CommonResponseType>(`follow/${userId}`)\r\n    },\r\n    unfollowUsers(userId: string) {\r\n        return instance.delete<CommonResponseType>(`follow/${userId}`)\r\n    },\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`/profile/status`, {status})\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<CommonResponseType<GetAuthUserData>>(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: boolean) {\r\n        return instance.post<CommonResponseType<{ userId: string }>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n    },\r\n}\r\n\r\n//types\r\nexport enum ResponseStatuses {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\n\r\ntype GetUsersType = {\r\n    items: UsersType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\ntype GetAuthUserData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import {addMessage, InitialStateType} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ComponentType} from 'react';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        stateDialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {addMessage,}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    stateDialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\nexport type DialogsType = MapStateToPropsType & MapDispatchToPropsType","import {UsersType} from '../../redux/users-reducer';\r\n\r\nexport const updateObjectInArray = (items: Array<UsersType>, itemId: string,  newObjProps: boolean) => {\r\n    return items.map(u => u.id === itemId ? {...u, followed: newObjProps} : u)\r\n}","import {ResponseStatuses, usersAPI} from '../api/api';\r\nimport {AppThunkType} from './store';\r\nimport {Dispatch} from 'redux';\r\nimport {updateObjectInArray} from '../utils/helpers/objectHelpers';\r\n\r\n\r\nconst initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as string[],\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: UsersActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'usersPage/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, true)\r\n                // users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'usersPage/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, false)\r\n                // users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'usersPage/SET-USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'usersPage/SET-CURRENT-PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'usersPage/SET-TOTAL-USERS-COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case 'usersPage/TOGGLE-IS-FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.value\r\n            }\r\n        case 'usersPage/TOGGLE-IS-FOLLOWING-PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress:\r\n                    action.inProgress\r\n                        ? [...state.followingInProgress, action.userId]\r\n                        : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const followSuccess = (userId: string) =>\r\n    ({type: 'usersPage/FOLLOW', userId} as const)\r\n\r\nexport const unfollowSuccess = (userId: string) =>\r\n    ({type: 'usersPage/UNFOLLOW', userId} as const)\r\n\r\nexport const setUsers = (users: Array<UsersType>) =>\r\n    ({type: 'usersPage/SET-USERS', users} as const)\r\n\r\nexport const setCurrentPage = (currentPage: number) =>\r\n    ({type: 'usersPage/SET-CURRENT-PAGE', currentPage} as const)\r\n\r\nexport const setTotalUsersCount = (totalCount: number) =>\r\n    ({type: 'usersPage/SET-TOTAL-USERS-COUNT', totalCount} as const)\r\n\r\nexport const toggleIsFetching = (value: boolean) =>\r\n    ({type: 'usersPage/TOGGLE-IS-FETCHING', value} as const)\r\n\r\nexport const toggleIsFollowingProgress = (inProgress: boolean, userId: string) =>\r\n    ({type: 'usersPage/TOGGLE-IS-FOLLOWING-PROGRESS', inProgress, userId} as const)\r\n\r\n\r\n//thunks\r\nexport const requestUsers = (page: number, pageSize: number): AppThunkType =>\r\n    async dispatch => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        const res = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(res.data.items))\r\n        dispatch(setTotalUsersCount(res.data.totalCount))\r\n    }\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<UsersActionsType>, userId: string, apiMethod: any, actionCreator: (userId: string) => FollowSuccessActionType | UnfollowSuccessActionType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    const res = await apiMethod(userId)\r\n    if (res.data.resultCode === ResponseStatuses.success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const apiMethod = usersAPI.followUsers.bind(usersAPI)\r\n        _followUnfollowFlow(dispatch, userId, apiMethod, followSuccess)\r\n    }\r\n\r\nexport const unfollow = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const apiMethod = usersAPI.unfollowUsers.bind(usersAPI)\r\n        _followUnfollowFlow(dispatch, userId, apiMethod, unfollowSuccess)\r\n    }\r\n\r\n//types\r\nexport type UsersType = {\r\n    id: string\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    uniqueUrlName: string | null\r\n    location?: {\r\n        city: string\r\n        country: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type FollowSuccessActionType = ReturnType<typeof followSuccess>\r\nexport type UnfollowSuccessActionType = ReturnType<typeof unfollowSuccess>\r\nexport type SetUsersActionType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleIsFollowingProgressActionType = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport type UsersActionsType =\r\n    | FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | ToggleIsFollowingProgressActionType","import React, {FC, useState} from 'react';\r\nimport s from './Pagination.module.css';\r\n\r\n\r\nexport const Pagination: FC<UsersPropsType> = (props) => {\r\n\r\n    const {totalItemsCount, currentPage, pageSize, onPageChanged, portionSize} = props\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={s.pagination}>\r\n            {\r\n                portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => {\r\n                    return (\r\n                        <span key={p} className={currentPage === p ? s.selectedPage : s.pageNumber}\r\n                              onClick={e => onPageChanged(p)}>\r\n                                {p}\r\n                            </span>\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                portionCount > portionNumber && <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype UsersPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n}","export default __webpack_public_path__ + \"static/media/user.4409fc97.png\";","import React, {FC} from 'react';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport s from './Users.module.css';\r\nimport {UsersType} from '../../redux/users-reducer';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nexport const User: FC<UserPropsType> = (props) => {\r\n\r\n    const {user, followingInProgress, follow, unfollow} = props\r\n\r\n    const onClickFollow = () => follow(user.id)\r\n    const onClickUnFollow = () => unfollow(user.id)\r\n\r\n    return (\r\n        <>\r\n            <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + user.id}>\r\n                                <img src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                                     className={s.userPhoto} alt={''}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                user.followed\r\n                                    ?\r\n                                    <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                            onClick={onClickUnFollow}>unFollow</button>\r\n                                    : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                              onClick={onClickFollow}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n            <span>\r\n                        <div>\r\n                            {user.name}\r\n                        </div>\r\n                        <div>\r\n                            {user.status}\r\n                        </div>\r\n                    </span>\r\n            <span>\r\n                            <div>{'u.location.country'}</div>\r\n                            <div>{'u.location.city'}</div>\r\n                    </span>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype UserPropsType = {\r\n    user: UsersType\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    followingInProgress: string[]\r\n}","import React, {FC} from 'react';\r\nimport {UsersType} from '../../redux/users-reducer';\r\nimport {Pagination} from '../common/pagination/Pagination';\r\nimport {User} from './User';\r\n\r\n\r\nexport const Users: FC<UsersPropsType> = (props) => {\r\n\r\n    const {totalUsersCount, users, currentPage, pageSize, followingInProgress, follow, onPageChanged, unfollow} = props\r\n\r\n    return (\r\n        <div>\r\n            <Pagination currentPage={currentPage}\r\n                        onPageChanged={onPageChanged}\r\n                        pageSize={pageSize}\r\n                        totalItemsCount={totalUsersCount}\r\n                        portionSize={10}/>\r\n    <div>\r\n        {\r\n            users.map(user => <User key={user.id}\r\n                                    user={user}\r\n                                    followingInProgress={followingInProgress}\r\n                                    follow={follow}\r\n                                    unfollow={unfollow}/>)\r\n        }\r\n    </div>\r\n</div>\r\n)\r\n}\r\n\r\n\r\n//types\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersType>\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    followingInProgress: string[]\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: string) => void\r\n}","export default __webpack_public_path__ + \"static/media/preloader.5665744c.svg\";","import React, {FC} from 'react';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nexport const Preloader: FC = () => {\r\n    return <>\r\n        <img src={preloader} alt={''}/>\r\n    </>\r\n}","import {AppStateType} from './store';\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    requestUsers,\r\n    setCurrentPage,\r\n    toggleIsFollowingProgress,\r\n    unfollow,\r\n    UsersType\r\n} from '../../redux/users-reducer';\r\nimport {AppStateType} from '../../redux/store';\r\nimport React, {Component, ComponentType} from 'react';\r\nimport {Users} from './Users';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\nimport {compose} from 'redux';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from '../../redux/users-selectors';\r\n\r\n\r\nclass UsersContainer extends Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        const {requestUsers, currentPage, pageSize} = this.props\r\n        requestUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {requestUsers, pageSize} = this.props\r\n        requestUsers(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        requestUsers,\r\n    }),\r\n    //withAuthRedirect\r\n)(UsersContainer)\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: string[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: string) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\n\r\n\r\nexport const ProfileStatusWithHooks: FC<PropsType> = ({status, updateUserStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [statusValue, setStatusValue] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setStatusValue(status)\r\n    }, [status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(statusValue)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{`🖊️ ${status} `}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus\r\n                        value={statusValue}\r\n                        onBlur={deactivateEditMode}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\n\r\nexport const ProfileInfo: FC<PropsType> = ({profile, status, updateUserStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img\r\n                    src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                    alt={''}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={profile.photos.large} alt={''}/>\r\n                <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import {v1} from 'uuid';\r\nimport {AppThunkType} from './store';\r\nimport {profileAPI} from '../api/api';\r\n\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'Hello', likesCount: 11},\r\n        {id: v1(), message: 'Buy', likesCount: 15},\r\n        {id: v1(), message: 'How are you?', likesCount: 7},\r\n        {id: v1(), message: 'I am fine, and you?', likesCount: 5},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profilePage/ADD-POST':\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData,\r\n                    {id: v1(), message: action.newPostText, likesCount: 0}\r\n                ],\r\n            }\r\n        case 'profilePage/SET-USER-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'profilePage/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'profilePage/REMOVE-POST':\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData.filter(p => p.id !== action.postId)\r\n                ],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const addPost = (newPostText: string) =>\r\n    ({type: 'profilePage/ADD-POST', newPostText} as const)\r\n\r\nexport const setUserProfile = (profile: ProfileType | null) =>\r\n    ({type: 'profilePage/SET-USER-PROFILE', profile} as const)\r\n\r\nexport const setStatus = (status: string) =>\r\n    ({type: 'profilePage/SET-STATUS', status} as const)\r\n\r\nexport const removePost = (postId: string) =>\r\n    ({type: 'profilePage/REMOVE-POST', postId} as const)\r\n\r\n\r\n//thunks\r\nexport const getUserProfile = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const res = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(res.data))\r\n    }\r\n\r\nexport const getUserStatus = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const res = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(res.data))\r\n    }\r\n\r\nexport const updateUserStatus = (status: string): AppThunkType =>\r\n    async dispatch => {\r\n        const res = await profileAPI.updateStatus(status)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\nexport type SetStatusActionType = ReturnType<typeof setStatus>\r\nexport type RemovePostActionType = ReturnType<typeof removePost>\r\n\r\nexport type ProfileActionsType =\r\n    | AddPostActionType\r\n    | SetUserProfileActionType\r\n    | SetStatusActionType\r\n    | RemovePostActionType","import React, {FC} from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: FC<PropsType> = ({message, likesCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg\" alt={''}/>\r\n            {message}\r\n            <div>\r\n                <span>{likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React, {FC} from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\n\r\nexport type FormDataType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nexport const AddPostForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='enter text'\r\n                    name='newPostText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {FC, memo} from 'react'\r\nimport {Post} from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddPostForm, FormDataType} from './AddPostForm';\r\n\r\n\r\nexport const MyPosts: FC<MyPostsType> = memo(({postsData, addPost}) => {\r\n\r\n    const postsElements = postsData.map(p =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onClickAddPost = (formData: FormDataType) => {\r\n        addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onClickAddPost}/>\r\n\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'addPostForm'})(AddPostForm)\r\n","import {addPost, PostType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n})(MyPosts)\r\n\r\n\r\n//types\r\nexport type MapStateToPropsType = {\r\n    postsData: Array<PostType>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\nexport const Profile: FC<PropsType> = ({profile, updateUserStatus, status}) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {Component, ComponentType} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus,} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {match, authorizedUserId, history, getUserProfile, getUserStatus} = this.props\r\n        let userId = match.params.userId\r\n        if (!userId) {\r\n            userId = JSON.stringify(authorizedUserId)\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profile}>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//types\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n","export default __webpack_public_path__ + \"static/media/Logo_header.8aaf41b6.png\";","import React, {FC} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport LogoForHeader from '../../assets/images/Logo_header.png';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nexport const Header: FC<PropsType> = ({isAuth, login, logout}) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src={LogoForHeader} alt={''}/>\r\n            <div className={s.loginBlock}>\r\n                {isAuth\r\n                    ? <div>{login} <button onClick={logout}>Log out</button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import {authAPI, ResponseStatuses} from '../api/api';\r\nimport {AppThunkType} from './store';\r\nimport {stopSubmit} from 'redux-form';\r\n\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: false,\r\n    isAuth: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'auth/SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, captcha: boolean, isAuth: boolean) =>\r\n    ({type: 'auth/SET-USER-DATA', payload: {userId, email, login, captcha, isAuth}} as const)\r\n\r\n\r\n//thunks\r\nexport const getAuthUserData = (): AppThunkType => async dispatch => {\r\n    const res = await authAPI.authMe()\r\n    if (res.data.resultCode === ResponseStatuses.success) {\r\n        let {id, email, login} = res.data.data\r\n        dispatch(setAuthUserData(id, email, login, true, true))\r\n    }\r\n    return res\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: boolean): AppThunkType => async dispatch => {\r\n    const res = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (res.data.resultCode === ResponseStatuses.success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (res.data.messages.length) {\r\n            dispatch(stopSubmit('login', {_error: res.data.messages[0]}))\r\n        } else {\r\n            dispatch(stopSubmit('login', {_error: 'Some error'}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n    const res = await authAPI.logout()\r\n    if (res.data.resultCode === ResponseStatuses.success) {\r\n        dispatch(setAuthUserData(null, null, null, false, false))\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type SetAuthUserDataActionType = ReturnType<typeof setAuthUserData>\r\nexport type AuthActionsType = SetAuthUserDataActionType","import React, {Component} from 'react'\r\nimport {Header} from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {logout} from '../../redux/auth-reducer';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\nexport type HeaderPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n\r\nclass HeaderContainer extends Component<HeaderPropsType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React, {FC} from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/formsControls/FormsControls';\r\nimport {requiredField} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport s from '../common/formsControls/FormsControls.module.css'\r\n\r\n\r\nconst Login: FC<MapStateToPropsType & MapDispatchToPropsType> = props => {\r\n\r\n    const {login, isAuth, captcha, children} = props\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoginForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Email'}\r\n                    name={'email'}\r\n                    component={Input}\r\n                    validate={[requiredField]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                    validate={[requiredField]}\r\n                    type={'password'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    type=\"checkbox\"\r\n                    name=\"rememberMe\"\r\n                    component={Input}\r\n                /> remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    captcha: state.auth.captcha,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n//types\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: boolean\r\n}\r\ntype MapStateToPropsType = {\r\n    captcha: boolean | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: boolean) => void\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps, {login})(Login)","import {AppThunkType} from './store';\r\nimport {getAuthUserData} from './auth-reducer';\r\n\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: InitializedAppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'app/INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const initializedSuccess = () => ({type: 'app/INITIALIZED-SUCCESS'} as const)\r\n\r\n\r\n//thunks\r\nexport const initializeApp = (): AppThunkType => async dispatch => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type InitializedSuccessActionType = ReturnType<typeof initializedSuccess>\r\nexport type InitializedAppActionsType = InitializedSuccessActionType","export type SidebarActionsType = ReturnType<any>\r\n\r\n\r\nconst initialState = {}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const sidebarReducer = (state: InitialStateType = initialState, action: SidebarActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'sidebar/':\r\n            return {\r\n                ...state,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore, compose} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {ProfileActionsType, profileReducer} from './profile-reducer';\r\nimport {DialogsActionsType, dialogsReducer} from './dialogs-reducer';\r\nimport {SidebarActionsType, sidebarReducer} from './sidebar-reducer';\r\nimport {UsersActionsType, usersReducer} from './users-reducer';\r\nimport {AuthActionsType, authReducer} from './auth-reducer';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer, InitializedAppActionsType} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\nexport type AppActionsType =\r\n    | AuthActionsType\r\n    | DialogsActionsType\r\n    | ProfileActionsType\r\n    | SidebarActionsType\r\n    | UsersActionsType\r\n    | InitializedAppActionsType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\n//@ts-ignore\r\nwindow.__store__ = store\r\n","import React, {Component, ComponentType} from 'react'\r\nimport s from './App.module.css'\r\nimport {Navbar} from './components/Navbar/Navbar'\r\nimport {News} from './components/News/News';\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\nimport {BrowserRouter, Route, withRouter} from 'react-router-dom'\r\nimport {DialogsContainer} from './components/Dialogs/DialogsContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport {connect, Provider} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport {AppStateType, store} from './redux/store';\r\nimport {Preloader} from './components/common/Preloader/Preloader';\r\n\r\n\r\nclass App extends Component<AppPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={s.appWrapper}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className={s.appWrapperContent}>\r\n                    <Route exact path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                    <Route exact path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route exact path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    <Route exact path=\"/news\" render={() => <News/>}/>\r\n                    <Route exact path=\"/music\" render={() => <Music/>}/>\r\n                    <Route exact path=\"/settings\" render={() => <Settings/>}/>\r\n                    <Route exact path=\"/login\" render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    initialized: state.app.initialized,\r\n})\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\nexport type AppPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst AppContainer = compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App)\r\n\r\n\r\nexport const SamuraiJSApp = () => {\r\n   return <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport {SamuraiJSApp} from './App';\r\n\r\nReactDOM.render(<SamuraiJSApp />,\r\n    document.getElementById('root')\r\n)\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Dn8Z\",\"dialogsItem\":\"Dialogs_dialogsItem__1NNkN\",\"textarea\":\"Dialogs_textarea__2IKdi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Z8L4\",\"error\":\"FormsControls_error__BtpDs\",\"formSummaryError\":\"FormsControls_formSummaryError__2qS17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__395W3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1Sq30\",\"button\":\"MyPosts_button__3kRgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Pagination_selectedPage__2L2RV\",\"pagination\":\"Pagination_pagination__2St_3\",\"pageNumber\":\"Pagination_pageNumber__3_VVs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1upY6\",\"appWrapperContent\":\"App_appWrapperContent__1w-fS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogItem_item__FOhNE\",\"activeLink\":\"DialogItem_activeLink__1OjsT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__26XEX\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2MG0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__tmv2U\",\"loginBlock\":\"Header_loginBlock__1H5dx\"};"],"sourceRoot":""}