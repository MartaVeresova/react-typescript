{"version":3,"sources":["components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","components/Dialogs/Message/Message.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","api/api.ts","reportWebVitals.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","utils/validators/validators.tsx","components/common/formsControls/FormsControls.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","assets/images/user.png","components/Users/Users.tsx","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","assets/images/Logo_header.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/common/formsControls/FormsControls.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","App.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css"],"names":["module","exports","ResponseStatuses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","res","data","userId","post","delete","profileAPI","status","put","authAPI","email","password","rememberMe","captcha","initialState","postsData","id","v1","message","likesCount","profile","setStatus","type","profileReducer","state","action","newPostText","dialogsData","name","messagesData","messageContent","dialogsReducer","newMessageText","sidebarReducer","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","toggleIsFetching","toggleIsFollowingProgress","usersReducer","map","u","followed","totalCount","filter","login","isAuth","setAuthUserData","payload","getAuthUserData","dispatch","a","resultCode","success","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","auth","app","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","News","news","Music","music","Settings","settings","Message","props","DialogItem","path","src","alt","requiredField","value","maxLengthCreator","maxLength","length","FormControl","input","meta","children","hasError","touched","error","formControl","Textarea","restProps","Input","maxLength50","AddMessageReduxForm","reduxForm","onSubmit","handleSubmit","Field","textarea","placeholder","component","validate","mapStateToProps","withAuthRedirect","Component","connect","DialogsContainer","compose","stateDialogsPage","addMessage","dialogsElements","d","messagesElements","m","dialogs","dialogsItem","messagesItem","formData","Users","pagesCount","Math","ceil","pages","i","push","p","selectedPage","onClick","e","onPageChanged","photos","small","userPhoto","disabled","some","unfollow","follow","Preloader","preloader","UsersContainer","pageNumber","getUsers","this","React","setCurrentPage","items","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","updateUserStatus","onStatusChange","currentTarget","prevProps","prevState","onDoubleClick","onBlur","autoFocus","onChange","ProfileInfo","profileInfo","descriptionBlock","large","Post","maxLength10","AddPostReduxForm","button","MyPostsContainer","addPost","postsElements","myPosts","Profile","ProfileContainer","match","params","JSON","stringify","authorizedUserId","history","getUserProfile","getUserStatus","withRouter","Header","header","LogoForHeader","loginBlock","logout","HeaderContainer","LoginReduxForm","formSummaryError","messages","stopSubmit","_error","App","initializeApp","appWrapper","appWrapperContent","exact","render","promise","Promise","all","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7210fb57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__1E9ra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__P7Nrm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__hPAd8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1jjej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1AFhw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__6-fH1\",\"item\":\"Navbar_item__3Ldnh\",\"activeLink\":\"Navbar_activeLink__uFs2O\"};","import axios from 'axios';\r\nimport {ProfileType} from '../redux/profile-reducer';\r\nimport {UsersType} from '../redux/users-reducer';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '56cc9d09-6ac5-48a7-98d1-6f7ea21ef704',\r\n    },\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => res.data)\r\n    },\r\n    followUsers(userId: string) {\r\n        return instance.post<CommonResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    unfollowUsers(userId: string) {\r\n        return instance.delete<CommonResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`/profile/status`, {status})\r\n            .then(res => res.data)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<CommonResponseType<GetAuthUserData>>(`auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: boolean) {\r\n        return instance.post<CommonResponseType<{ userId: string }>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n            .then(res => res.data)\r\n    },\r\n}\r\n\r\n//types\r\nexport enum ResponseStatuses {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\n\r\ntype GetUsersType = {\r\n    items: UsersType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\ntype GetAuthUserData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {v1} from 'uuid';\r\nimport {AppThunkType} from './redux-store';\r\nimport {profileAPI} from '../api/api';\r\n\r\n\r\n// export type InitialStateType = {\r\n//     postsData: Array<PostType>\r\n//     profile: ProfileType | null,\r\n//     status: string,\r\n// }\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'Hello', likesCount: 11},\r\n        {id: v1(), message: 'Buy', likesCount: 15},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ProfileActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData,\r\n                    {id: v1(), message: action.newPostText, likesCount: 0}\r\n                ],\r\n            }\r\n        case 'SET-USER-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const addPost = (newPostText: string) =>\r\n    ({type: 'ADD-POST', newPostText} as const)\r\n\r\nexport const setUserProfile = (profile: ProfileType) =>\r\n    ({type: 'SET-USER-PROFILE', profile} as const)\r\n\r\nexport const setStatus = (status: string) =>\r\n    ({type: 'SET-STATUS', status} as const)\r\n\r\n\r\n//thunks\r\nexport const getUserProfile = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const data = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(data))\r\n    }\r\n\r\nexport const getUserStatus = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const data = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(data))\r\n    }\r\n\r\nexport const updateUserStatus = (status: string): AppThunkType =>\r\n    async dispatch => {\r\n        const data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\nexport type SetStatusActionType = ReturnType<typeof setStatus>\r\n\r\nexport type ProfileActionsType =\r\n    | AddPostActionType\r\n    | SetUserProfileActionType\r\n    | SetStatusActionType\r\n\r\n\r\n\r\nexport default profileReducer","import {v1} from 'uuid';\r\n\r\n// export type DialogsPageType = {\r\n//     dialogsData: Array<DialogItemType>\r\n//     messagesData: Array<MessageItemType>\r\n//     newMessageText: string\r\n// }\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: v1(), name: 'Marta'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Vera'},\r\n        {id: v1(), name: 'Anton'},\r\n        {id: v1(), name: 'Vanya'},\r\n    ] as Array<DialogItemType>,\r\n    messagesData: [\r\n        {id: v1(), messageContent: 'Hello'},\r\n        {id: v1(), messageContent: 'How are you?'},\r\n        {id: v1(), messageContent: 'Yo'},\r\n    ] as Array<MessageItemType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: DialogsActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [\r\n                    ...state.messagesData,\r\n                    {id: v1(), messageContent: action.newMessageText}\r\n                ],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const addMessage = (newMessageText: string) =>\r\n    ({type: 'ADD-MESSAGE', newMessageText} as const)\r\n\r\n\r\n//types\r\nexport type MessageItemType = {\r\n    id?: string\r\n    messageContent: string\r\n}\r\nexport type DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type AddMessageActionType = ReturnType<typeof addMessage>\r\nexport type DialogsActionsType = AddMessageActionType\r\n\r\n\r\n\r\nexport default dialogsReducer","export type SidebarActionsType = ReturnType<any>\r\n\r\n\r\nconst initialState = {}\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state: InitialStateType = initialState, action: SidebarActionsType): InitialStateType => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer","import {ResponseStatuses, usersAPI} from '../api/api';\r\nimport {AppThunkType} from './redux-store';\r\n\r\n\r\n// type InitialStateType = {\r\n//     users: Array<UsersType>\r\n//     pageSize: number\r\n//     totalUsersCount: number\r\n//     currentPage: number\r\n//     isFetching: boolean\r\n//     followingInProgress: string[]\r\n// }\r\n\r\nconst initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as string[],\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'SET-USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'SET-CURRENT-PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'SET-TOTAL-USERS-COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case 'TOGGLE-IS-FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case 'TOGGLE-IS-FOLLOWING-PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress:\r\n                    action.isFetching\r\n                        ? [...state.followingInProgress, action.userId]\r\n                        : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const followSuccess = (userId: string) =>\r\n    ({type: 'FOLLOW', userId} as const)\r\n\r\nexport const unfollowSuccess = (userId: string) =>\r\n    ({type: 'UNFOLLOW', userId} as const)\r\n\r\nexport const setUsers = (users: Array<UsersType>) =>\r\n    ({type: 'SET-USERS', users} as const)\r\n\r\nexport const setCurrentPage = (currentPage: number) =>\r\n    ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\n\r\nexport const setTotalUsersCount = (totalCount: number) =>\r\n    ({type: 'SET-TOTAL-USERS-COUNT', totalCount} as const)\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) =>\r\n    ({type: 'TOGGLE-IS-FETCHING', isFetching} as const)\r\n\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: string) =>\r\n    ({type: 'TOGGLE-IS-FOLLOWING-PROGRESS', isFetching, userId} as const)\r\n\r\n\r\n//thunks\r\nexport const getUsers = (currentPage: number, pageSize: number): AppThunkType =>\r\n    async dispatch => {\r\n        dispatch(toggleIsFetching(true))\r\n        const data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n\r\nexport const follow = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        dispatch(toggleIsFollowingProgress(true, userId))\r\n        const data = await usersAPI.followUsers(userId)\r\n        if (data.resultCode === ResponseStatuses.success) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userId))\r\n    }\r\n\r\nexport const unfollow = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        dispatch(toggleIsFollowingProgress(true, userId))\r\n        const data = await usersAPI.unfollowUsers(userId)\r\n        if (data.resultCode === ResponseStatuses.success) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userId))\r\n    }\r\n\r\n//types\r\nexport type UsersType = {\r\n    id: string\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    uniqueUrlName: string | null\r\n    location?: {\r\n        city: string\r\n        country: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type FollowSuccessActionType = ReturnType<typeof followSuccess>\r\nexport type UnfollowSuccessActionType = ReturnType<typeof unfollowSuccess>\r\nexport type SetUsersActionType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleIsFollowingProgressActionType = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport type UsersActionsType =\r\n    | FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | ToggleIsFollowingProgressActionType\r\n\r\n\r\n\r\nexport default usersReducer","import {authAPI, ResponseStatuses} from '../api/api';\r\nimport {AppThunkType} from './redux-store';\r\nimport {stopSubmit} from 'redux-form';\r\n\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: false,\r\n    isAuth: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, captcha: boolean, isAuth: boolean) =>\r\n    ({type: 'SET-USER-DATA', payload: {userId, email, login, captcha, isAuth}} as const)\r\n\r\n\r\n//thunks\r\nexport const getAuthUserData = (): AppThunkType => async dispatch => {\r\n    const data = await authAPI.authMe()\r\n    if (data.resultCode === ResponseStatuses.success) {\r\n        let {id, email, login} = data.data\r\n        dispatch(setAuthUserData(id, email, login, true, true))\r\n    }\r\n    return data\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: boolean): AppThunkType => async dispatch => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResponseStatuses.success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.messages.length) {\r\n            dispatch(stopSubmit('login', {_error: data.messages[0]}))\r\n        } else {\r\n            dispatch(stopSubmit('login', {_error: 'Some error'}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n    const data = await authAPI.logout()\r\n    if (data.resultCode === ResponseStatuses.success) {\r\n        dispatch(setAuthUserData(null, null, null, false, false))\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type SetAuthUserDataActionType = ReturnType<typeof setAuthUserData>\r\nexport type AuthActionsType = SetAuthUserDataActionType\r\n\r\n\r\nexport default authReducer","import {AppThunkType} from './redux-store';\r\nimport {getAuthUserData} from './auth-reducer';\r\n\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state: InitialStateType = initialState, action: InitializedAppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const initializedSuccessAC = () => ({type: 'INITIALIZED-SUCCESS'} as const)\r\n\r\n\r\n//thunks\r\nexport const initializeApp = (): AppThunkType => async dispatch => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccessAC())\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type InitializedSuccessActionType = ReturnType<typeof initializedSuccessAC>\r\nexport type InitializedAppActionsType = InitializedSuccessActionType\r\n\r\n\r\nexport default appReducer","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport profileReducer, {ProfileActionsType} from './profile-reducer';\r\nimport dialogsReducer, {DialogsActionsType} from './dialogs-reducer';\r\nimport sidebarReducer, {SidebarActionsType} from './sidebar-reducer';\r\nimport usersReducer, {UsersActionsType} from './users-reducer';\r\nimport authReducer, {AuthActionsType} from './auth-reducer';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer, {InitializedAppActionsType} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppActionsType =\r\n    | AuthActionsType\r\n    | DialogsActionsType\r\n    | ProfileActionsType\r\n    | SidebarActionsType\r\n    | UsersActionsType\r\n    | InitializedAppActionsType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Navbar.module.css'\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\n\r\nexport function News() {\r\n    return (\r\n        <div className={s.news}>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\n\r\nexport function Music() {\r\n    return (\r\n        <div className={s.music}>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\n\r\nexport function Settings() {\r\n    return (\r\n        <div className={s.settings}>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './Message.module.css'\r\nimport {MessageItemType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nexport function Message(props: MessageItemType) {\r\n\r\n    return (\r\n        <div className={s.message}>{props.messageContent}</div>\r\n    )\r\n}","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogItem.module.css'\r\nimport {DialogItemType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    const path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={`${s.item} ${s.activeLink}`}>\r\n            <NavLink to={path}>\r\n                <img src=\"https://avatars.mds.yandex.net/get-pdb/1025945/a6f96698-c78d-44fb-b802-38e74e0164dd/s1200\" alt={''}/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","export const requiredField = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React from 'react'\r\nimport {WrappedFieldProps} from 'redux-form/lib/Field';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError && s.error)}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport s from '../Dialogs.module.css';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={s.textarea}\r\n                    placeholder='Enter your message'\r\n                    name='newMessageText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n//types\r\nexport type FormDataType = {\r\n    newMessageText: string\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsType} from './DialogsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddMessageForm, FormDataType} from './Message/AddMessageForm';\r\n\r\n\r\nexport function Dialogs(props: DialogsType) {\r\n\r\n    const dialogsElements = props.stateDialogsPage.dialogsData.map(d => <DialogItem\r\n        key={d.id} name={d.name}\r\n        id={d.id}/>)\r\n    const messagesElements = props.stateDialogsPage.messagesData.map(m => <Message\r\n        key={m.id}\r\n        messageContent={m.messageContent}/>)\r\n\r\n\r\n    const onClickAddMessage = (formData: FormDataType) => {\r\n        props.addMessage(formData.newMessageText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messagesItem}>\r\n                {messagesElements}\r\n                <AddMessageReduxForm onSubmit={onClickAddMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'addMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","import {addMessage, InitialStateType} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ComponentType} from 'react';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        stateDialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {addMessage,}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    stateDialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\nexport type DialogsType = MapStateToPropsType & MapDispatchToPropsType","export default __webpack_public_path__ + \"static/media/user.4409fc97.png\";","import React from 'react';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport s from './Users.module.css';\r\nimport {UsersType} from '../../redux/users-reducer';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\n\r\nexport function Users(props: UsersPropsType) {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span className={props.currentPage === p ? s.selectedPage : ''}\r\n                                 onClick={(e) => props.onPageChanged(p)}>{p}</span>\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => {\r\n                    const onClickFollow = () => props.follow(u.id)\r\n                    const onClickUnFollow = () => props.unfollow(u.id)\r\n\r\n                    return (\r\n                        <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                                <img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                     className={s.userPhoto} alt={''}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ?\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                        onClick={onClickUnFollow}>unFollow</button>\r\n                                : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                          onClick={onClickFollow}>follow</button>}\r\n                        </div>\r\n                    </span>\r\n                            <span>\r\n                        <div>\r\n                            {u.name}\r\n                        </div>\r\n                        <div>\r\n                            {u.status}\r\n                        </div>\r\n                    </span>\r\n                            <span>\r\n                            <div>{'u.location.country'}</div>\r\n                            <div>{'u.location.city'}</div>\r\n                    </span>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersType>\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    followingInProgress: string[]\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: string) => void\r\n}","export default __webpack_public_path__ + \"static/media/preloader.5665744c.svg\";","import preloader from '../../../assets/images/preloader.svg';\r\nimport React from 'react';\r\n\r\nexport function Preloader() {\r\n    return <>\r\n        <img src={preloader} alt={''}/>\r\n    </>\r\n}","import {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    getUsers,\r\n    setCurrentPage,\r\n    toggleIsFollowingProgress,\r\n    unfollow,\r\n    UsersType\r\n} from '../../redux/users-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport React, {ComponentType} from 'react';\r\nimport {Users} from './Users';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\nimport {compose} from 'redux';\r\n\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        getUsers,\r\n    }),\r\n    //withAuthRedirect\r\n)(UsersContainer)\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: string[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: string) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","import React, {ChangeEvent} from 'react'\r\n\r\n\r\n\r\nclass ProfileStatus extends React.Component<PropsType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: any) {\r\n        if (prevProps.status !== this.props.status)\r\n            this.setState({\r\n                status: this.state.status\r\n            })\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false,\r\n        })\r\n        this.props.updateUserStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    !this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || '@@@'}</span>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.editMode &&\r\n                    <div>\r\n                        <input\r\n                            onBlur={this.deactivateEditMode}\r\n                            autoFocus\r\n                            value={this.state.status}\r\n                            onChange={this.onStatusChange}\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport default ProfileStatus\r\n\r\n","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\n\r\n\r\nexport function ProfileInfo(props: PropsType) {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img\r\n                    src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                    alt={''}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={props.profile.photos.large} alt={''}/>\r\n                <ProfileStatus\r\n                    status={props.status}\r\n                    updateUserStatus={props.updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport function Post(props: PropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg\" alt={''}/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\n\r\nexport type FormDataType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='enter text'\r\n                    name='newPostText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport {Post} from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddPostForm, FormDataType} from './AddPostForm';\r\n\r\n\r\nexport function MyPosts(props: MyPostsType) {\r\n\r\n    const postsElements = props.postsData.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n\r\n    const onClickAddPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onClickAddPost}/>\r\n\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'addPostForm'})(AddPostForm)\r\n","import {addPost, PostType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n})(MyPosts)\r\n\r\n\r\n//types\r\nexport type MapStateToPropsType = {\r\n    postsData: Array<PostType>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\nexport function Profile(props: PropsType) {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType= {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {ComponentType} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus,} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = JSON.stringify(this.props.authorizedUserId)\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profile}>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//types\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n","export default __webpack_public_path__ + \"static/media/Logo_header.8aaf41b6.png\";","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport LogoForHeader from '../../assets/images/Logo_header.png';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nexport function Header(props: PropsType) {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src={LogoForHeader} alt={''}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} <button onClick={props.logout}>Log out</button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from 'react'\r\nimport {Header} from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {logout} from '../../redux/auth-reducer';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\nexport type HeaderPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/formsControls/FormsControls';\r\nimport {requiredField} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport s from '../common/formsControls/FormsControls.module.css'\r\n\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Email'}\r\n                    name={'email'}\r\n                    component={Input}\r\n                    validate={[requiredField]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                    validate={[requiredField]}\r\n                    type={'password'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    type=\"checkbox\"\r\n                    name=\"rememberMe\"\r\n                    component={Input}\r\n                /> remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    captcha: state.auth.captcha,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n//types\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: boolean\r\n}\r\ntype MapStateToPropsType = {\r\n    captcha: boolean | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: boolean) => void\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps, {login})(Login)","import React, {ComponentType} from 'react'\r\nimport s from './App.module.css'\r\nimport {Navbar} from './components/Navbar/Navbar'\r\nimport {News} from './components/News/News';\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\nimport {Route, withRouter} from 'react-router-dom'\r\nimport {DialogsContainer} from './components/Dialogs/DialogsContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport {AppStateType} from './redux/redux-store';\r\nimport {Preloader} from './components/common/Preloader/Preloader';\r\n\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={s.appWrapper}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className={s.appWrapperContent}>\r\n                    <Route exact path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                    <Route exact path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route exact path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    <Route exact path=\"/news\" render={() => <News/>}/>\r\n                    <Route exact path=\"/music\" render={() => <Music/>}/>\r\n                    <Route exact path=\"/settings\" render={() => <Settings/>}/>\r\n                    <Route exact path=\"/login\" render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    initialized: state.app.initialized,\r\n})\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\nexport type AppPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App)\r\n\r\n\r\n","import React from 'react'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/redux-store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Dn8Z\",\"dialogsItem\":\"Dialogs_dialogsItem__1NNkN\",\"textarea\":\"Dialogs_textarea__2IKdi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Z8L4\",\"error\":\"FormsControls_error__BtpDs\",\"formSummaryError\":\"FormsControls_formSummaryError__2qS17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__395W3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1Sq30\",\"button\":\"MyPosts_button__3kRgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1upY6\",\"appWrapperContent\":\"App_appWrapperContent__1w-fS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogItem_item__FOhNE\",\"activeLink\":\"DialogItem_activeLink__1OjsT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__Sr8R7\",\"selectedPage\":\"Users_selectedPage__3gyJ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__26XEX\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2MG0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__tmv2U\",\"loginBlock\":\"Header_loginBlock__1H5dx\"};"],"sourceRoot":""}