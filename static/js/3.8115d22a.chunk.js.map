{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","status","updateUserStatus","useState","editMode","setEditMode","statusValue","setStatusValue","useEffect","onDoubleClick","autoFocus","value","onBlur","onChange","e","currentTarget","ProfileInfo","profile","className","s","profileInfo","src","alt","descriptionBlock","photos","large","Preloader","Post","message","likesCount","item","maxLength10","maxLengthCreator","MyPosts","memo","postsData","addPost","postsElements","map","p","id","myPosts","AddPostReduxForm","onSubmit","formData","newPostText","reduxForm","form","handleSubmit","Field","placeholder","name","component","Textarea","validate","requiredField","button","MyPostsContainer","profilePage","Profile","ProfileContainer","this","match","authorizedUserId","history","getUserProfile","getUserStatus","userId","params","JSON","stringify","push","compose","withRouter"],"mappings":"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","file":"static/js/3.8115d22a.chunk.js","sourcesContent":["import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__395W3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1Sq30\",\"button\":\"MyPosts_button__3kRgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__26XEX\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2MG0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1AFhw\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\n\r\n\r\nexport const ProfileStatusWithHooks: FC<PropsType> = ({status, updateUserStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [statusValue, setStatusValue] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setStatusValue(status)\r\n    }, [status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(statusValue)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{`üñäÔ∏è ${status} `}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus\r\n                        value={statusValue}\r\n                        onBlur={deactivateEditMode}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\n\r\nexport const ProfileInfo: FC<PropsType> = ({profile, status, updateUserStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img\r\n                    src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                    alt={''}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={profile.photos.large} alt={''}/>\r\n                <ProfileStatusWithHooks\r\n                    status={status}\r\n                    updateUserStatus={updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post: FC<PropsType> = ({message, likesCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg\" alt={''}/>\r\n            {message}\r\n            <div>\r\n                <span>{likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React, {FC} from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\n\r\nexport type FormDataType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nexport const AddPostForm: FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='enter text'\r\n                    name='newPostText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React, {FC, memo} from 'react'\r\nimport {Post} from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddPostForm, FormDataType} from './AddPostForm';\r\n\r\n\r\nexport const MyPosts: FC<MyPostsType> = memo(({postsData, addPost}) => {\r\n\r\n    const postsElements = postsData.map(p =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onClickAddPost = (formData: FormDataType) => {\r\n        addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onClickAddPost}/>\r\n\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'addPostForm'})(AddPostForm)\r\n","import {addPost, PostType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n})(MyPosts)\r\n\r\n\r\n//types\r\nexport type MapStateToPropsType = {\r\n    postsData: Array<PostType>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n","import React, {FC} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\nexport const Profile: FC<PropsType> = ({profile, updateUserStatus, status}) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {Component, ComponentType} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus,} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {match, authorizedUserId, history, getUserProfile, getUserStatus} = this.props\r\n        let userId = match.params.userId\r\n        if (!userId) {\r\n            userId = JSON.stringify(authorizedUserId)\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profile}>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//types\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n"],"sourceRoot":""}