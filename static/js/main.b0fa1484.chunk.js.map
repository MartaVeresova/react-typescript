{"version":3,"sources":["components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","components/Dialogs/Message/Message.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","api/api.ts","reportWebVitals.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/sidebar-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/store.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","utils/validators/validators.tsx","components/common/formsControls/FormsControls.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","assets/images/user.png","components/Users/Users.tsx","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","assets/images/Logo_header.png","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/common/formsControls/FormsControls.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","App.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css"],"names":["module","exports","ResponseStatuses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","res","data","userId","post","delete","profileAPI","status","put","authAPI","email","password","rememberMe","captcha","initialState","postsData","id","v1","message","likesCount","profile","setStatus","type","dialogsData","name","messagesData","messageContent","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","value","toggleIsFollowingProgress","inProgress","login","isAuth","setAuthUserData","payload","getAuthUserData","dispatch","a","resultCode","success","initialized","rootReducer","combineReducers","profilePage","state","action","newPostText","filter","p","postId","dialogsPage","newMessageText","m","messageId","sidebar","usersPage","map","u","followed","totalCount","auth","app","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","News","news","Music","music","Settings","settings","Message","props","DialogItem","path","src","alt","requiredField","maxLengthCreator","maxLength","length","FormControl","input","meta","children","hasError","touched","error","formControl","Textarea","restProps","Input","maxLength50","AddMessageReduxForm","reduxForm","onSubmit","handleSubmit","Field","textarea","placeholder","component","validate","mapStateToProps","withAuthRedirect","Component","connect","DialogsContainer","compose","stateDialogsPage","addMessage","dialogsElements","d","messagesElements","dialogs","dialogsItem","messagesItem","formData","Users","pagesCount","Math","ceil","pages","i","push","console","log","selectedPage","onClick","e","onPageChanged","photos","small","userPhoto","disabled","some","unfollow","follow","Preloader","preloader","getUsers","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","requestUsers","this","React","page","items","ProfileStatusWithHooks","updateUserStatus","useState","editMode","setEditMode","statusValue","setStatusValue","useEffect","onDoubleClick","autoFocus","onBlur","onChange","currentTarget","ProfileInfo","profileInfo","descriptionBlock","large","Post","maxLength10","MyPosts","memo","postsElements","myPosts","AddPostReduxForm","addPost","button","MyPostsContainer","Profile","ProfileContainer","match","params","JSON","stringify","authorizedUserId","history","getUserProfile","getUserStatus","withRouter","Header","header","LogoForHeader","loginBlock","logout","HeaderContainer","LoginReduxForm","formSummaryError","messages","stopSubmit","_error","App","initializeApp","appWrapper","appWrapperContent","exact","render","promise","Promise","all","ReactDOM","StrictMode","document","getElementById"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,MAAQ,uB,oBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,oBCA7BD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,kEC+DzEC,E,gBClDGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2GDJRQ,E,OAAWC,EAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAW,0CAKNC,EAAW,WACsB,IAAjCC,EAAgC,uDAAlB,EAAGC,EAAe,uDAAJ,GACjC,OAAOR,EAASS,IAAT,qBAAyCF,EAAzC,kBAA8DC,IAChEd,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,SAHhBL,EAAW,SAKRM,GACR,OAAOZ,EAASa,KAAT,iBAA4CD,IAC9ClB,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,SAPhBL,EAAW,SASNM,GACV,OAAOZ,EAASc,OAAT,iBAA8CF,IAChDlB,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,SAGhBI,EAAa,SACXH,GACP,OAAOZ,EAASS,IAAT,kBAAqCG,IACvClB,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,SAHhBI,EAAa,SAKZH,GACN,OAAOZ,EAASS,IAAT,0BAAwCG,IAC1ClB,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,SAPhBI,EAAa,SASTC,GACT,OAAOhB,EAASiB,IAAT,kBAAoD,CAACD,WACvDtB,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,SAIhBO,EAAU,WAEf,OAAOlB,EAASS,IAAT,WACFf,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,SAHhBO,EAAU,SAKbC,EAAeC,GAAkE,IAAhDC,EAA+C,wDAAlBC,EAAkB,uCAClF,OAAOtB,EAASa,KAAT,cAAqE,CACxEM,QACAC,WACAC,aACAC,YAEC5B,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,SAZhBO,EAAU,WAef,OAAOlB,EAASc,OAAT,eACFpB,MAAK,SAAAgB,GAAG,OAAIA,EAAIC,U,SAKjBrB,O,qBAAAA,I,iBAAAA,I,uBAAAA,M,KE3DZ,IAAMiC,EAAe,CACjBC,UAAW,CACP,CAACC,GAAIC,cAAMC,QAAS,QAASC,WAAY,IACzC,CAACH,GAAIC,cAAMC,QAAS,MAAOC,WAAY,IACvC,CAACH,GAAIC,cAAMC,QAAS,eAAgBC,WAAY,GAChD,CAACH,GAAIC,cAAMC,QAAS,sBAAuBC,WAAY,IAE3DC,QAAS,KACTb,OAAQ,IA6CCc,EAAY,SAACd,GAAD,MACpB,CAACe,KAAM,yBAA0Bf,WCxDhCO,EAAe,CACjBS,YAAa,CACT,CAACP,GAAIC,cAAMO,KAAM,SACjB,CAACR,GAAIC,cAAMO,KAAM,SACjB,CAACR,GAAIC,cAAMO,KAAM,QACjB,CAACR,GAAIC,cAAMO,KAAM,SACjB,CAACR,GAAIC,cAAMO,KAAM,UAErBC,aAAc,CACV,CAACT,GAAIC,cAAMS,eAAgB,SAC3B,CAACV,GAAIC,cAAMS,eAAgB,gBAC3B,CAACV,GAAIC,cAAMS,eAAgB,QCX7BZ,EAAe,GCCfA,EAAe,CACjBa,MAAO,GACP5B,SAAU,EACV6B,gBAAiB,EACjB9B,YAAa,EACb+B,YAAY,EACZC,oBAAqB,IAoDZC,EAAgB,SAAC5B,GAAD,MACxB,CAACmB,KAAM,mBAAoBnB,WAEnB6B,EAAkB,SAAC7B,GAAD,MAC1B,CAACmB,KAAM,qBAAsBnB,WAKrB8B,EAAiB,SAACnC,GAAD,MACzB,CAACwB,KAAM,6BAA8BxB,gBAK7BoC,EAAmB,SAACC,GAAD,MAC3B,CAACb,KAAM,+BAAgCa,UAE/BC,EAA4B,SAACC,EAAqBlC,GAAtB,MACpC,CAACmB,KAAM,yCAA0Ce,aAAYlC,W,QC5E5DW,EAAe,CACjBX,OAAQ,KACRO,MAAO,KACP4B,MAAO,KACPzB,SAAS,EACT0B,QAAQ,GAmBCC,EAAkB,SAACrC,EAAuBO,EAAsB4B,EAAsBzB,EAAkB0B,GAAtF,MAC1B,CAACjB,KAAM,qBAAsBmB,QAAS,CAACtC,SAAQO,QAAO4B,QAAOzB,UAAS0B,YAI9DG,EAAkB,yDAAoB,WAAMC,GAAN,uBAAAC,EAAA,sEAC5BnC,IAD4B,cACzCP,EADyC,QAEtC2C,aAAehE,EAAiBiE,UAAU,EACtB5C,EAAKA,KAAzBc,EADyC,EACzCA,GAAIN,EADqC,EACrCA,MAAO4B,EAD8B,EAC9BA,MAChBK,EAASH,EAAgBxB,EAAIN,EAAO4B,GAAO,GAAM,KAJN,kBAMxCpC,GANwC,2CAApB,uD,SC9BzBY,EAAe,CACjBiC,aAAa,GCKXC,EAAcC,YAAgB,CAChCC,YNO0B,WAA2F,IAA1FC,EAAyF,uDAA/DrC,EAAcsC,EAAiD,uCAEpH,OAAQA,EAAO9B,MACX,IAAK,uBACD,OAAO,2BACA6B,GADP,IAEIpC,UAAU,GAAD,mBACFoC,EAAMpC,WADJ,CAEL,CAACC,GAAIC,cAAMC,QAASkC,EAAOC,YAAalC,WAAY,OAGhE,IAAK,+BACD,OAAO,2BACAgC,GADP,IAEI/B,QAASgC,EAAOhC,UAExB,IAAK,yBACD,OAAO,2BACA+B,GADP,IAEI5C,OAAQ6C,EAAO7C,SAEvB,IAAK,0BACD,OAAO,2BACA4C,GADP,IAEIpC,UAAU,YACHoC,EAAMpC,UAAUuC,QAAO,SAAAC,GAAC,OAAIA,EAAEvC,KAAOoC,EAAOI,aAG3D,QACI,OAAOL,IMnCfM,YLQ0B,WAA2F,IAA1FN,EAAyF,uDAA/DrC,EAAcsC,EAAiD,uCAEpH,OAAQA,EAAO9B,MACX,IAAK,0BACD,OAAO,2BACA6B,GADP,IAEI1B,aAAa,GAAD,mBACL0B,EAAM1B,cADD,CAER,CAACT,GAAIC,cAAMS,eAAgB0B,EAAOM,oBAG9C,IAAK,6BACD,OAAO,2BACAP,GADP,IAEI1B,aAAa,YACN0B,EAAM1B,aAAa6B,QAAO,SAAAK,GAAC,OAAIA,EAAE3C,KAAOoC,EAAOQ,gBAG9D,QACI,OAAOT,IK1BfU,QJN0B,WAA2F,IAA1FV,EAAyF,uDAA/DrC,EAAcsC,EAAiD,uCAEpH,OAAQA,EAAO9B,MACX,IAAK,WACD,OAAO,eACA6B,GAEX,QACI,OAAOA,IIDfW,UHCwB,WAAyF,IAAxFX,EAAuF,uDAA7DrC,EAAcsC,EAA+C,uCAEhH,OAAQA,EAAO9B,MACX,IAAK,mBACD,OAAO,2BACA6B,GADP,IAEIxB,MAAOwB,EAAMxB,MAAMoC,KAAI,SAAAC,GAAC,OAAIA,EAAEhD,KAAOoC,EAAOjD,OAAhB,2BAA6B6D,GAA7B,IAAgCC,UAAU,IAAQD,OAEtF,IAAK,qBACD,OAAO,2BACAb,GADP,IAEIxB,MAAOwB,EAAMxB,MAAMoC,KAAI,SAAAC,GAAC,OAAIA,EAAEhD,KAAOoC,EAAOjD,OAAhB,2BAA6B6D,GAA7B,IAAgCC,UAAU,IAASD,OAEvF,IAAK,sBACD,OAAO,2BACAb,GADP,IAEIxB,MAAOyB,EAAOzB,QAEtB,IAAK,6BACD,OAAO,2BACAwB,GADP,IAEIrD,YAAasD,EAAOtD,cAE5B,IAAK,kCACD,OAAO,2BACAqD,GADP,IAEIvB,gBAAiBwB,EAAOc,aAEhC,IAAK,+BACD,OAAO,2BACAf,GADP,IAEItB,WAAYuB,EAAOjB,QAE3B,IAAK,yCACD,OAAO,2BACAgB,GADP,IAEIrB,oBACIsB,EAAOf,WAAP,sBACUc,EAAMrB,qBADhB,CACqCsB,EAAOjD,SACtCgD,EAAMrB,oBAAoBwB,QAAO,SAAAtC,GAAE,OAAIA,IAAOoC,EAAOjD,YAEvE,QACI,OAAOgD,IG1CfgB,KFAuB,WAAwF,IAAvFhB,EAAsF,uDAA5DrC,EAAcsC,EAA8C,uCAE9G,OAAQA,EAAO9B,MACX,IAAK,qBACD,OAAO,2BACA6B,GACAC,EAAOX,SAElB,QACI,OAAOU,IERfiB,IDNsB,WAAkG,IAAjGjB,EAAgG,uDAAtErC,EAAcsC,EAAwD,uCAEvH,OAAQA,EAAO9B,MACX,IAAK,0BACD,OAAO,2BACA6B,GADP,IAEIJ,aAAa,IAGrB,QACI,OAAOI,ICHfkB,KAAMC,MAKGC,EAAQC,YAAYxB,EAAayB,YAAgBC,MAgB9DC,OAAOJ,MAAQA,E,iFClCR,SAASK,KACZ,OACI,uBAAKC,UAAWC,KAAEC,IAAlB,UACI,sBAAKF,UAAWC,KAAEE,KAAlB,SACI,eAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,KAAEK,WAA1C,uBAEJ,sBAAKN,UAAS,UAAKC,KAAEE,KAAP,YAAeF,KAAEM,QAA/B,SACI,eAAC,IAAD,CAASH,GAAG,WAAWC,gBAAiBJ,KAAEK,WAA1C,wBAEJ,sBAAKN,UAAS,UAAKC,KAAEE,KAAP,YAAeF,KAAEM,QAA/B,SACI,eAAC,IAAD,CAASH,GAAG,SAASC,gBAAiBJ,KAAEK,WAAxC,qBAEJ,sBAAKN,UAAWC,KAAEE,KAAlB,SACI,eAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBJ,KAAEK,WAAvC,oBAEJ,sBAAKN,UAAWC,KAAEE,KAAlB,SACI,eAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,KAAEK,WAAxC,qBAEJ,sBAAKN,UAAWC,KAAEE,KAAlB,SACI,eAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,KAAEK,WAA3C,2B,yBCnBT,SAASE,KACZ,OACI,sBAAKR,UAAWC,KAAEQ,KAAlB,kB,yBCFD,SAASC,KACZ,OACI,sBAAKV,UAAWC,KAAEU,MAAlB,mB,yBCFD,SAASC,KACZ,OACI,sBAAKZ,UAAWC,KAAEY,SAAlB,sB,sDCDD,SAASC,GAAQC,GAEpB,OACI,sBAAKf,UAAWC,KAAE5D,QAAlB,SAA4B0E,EAAMlE,iB,wBCFnC,SAASmE,GAAWD,GACvB,IAAME,EAAO,YAAcF,EAAM5E,GAEjC,OACI,sBAAK6D,UAAS,UAAKC,KAAEE,KAAP,YAAeF,KAAEK,YAA/B,SACI,gBAAC,IAAD,CAASF,GAAIa,EAAb,UACI,sBAAKC,IAAI,4FAA4FC,IAAK,KACzGJ,EAAMpE,U,cCbVyE,GAAgB,SAAC9D,GAC1B,IAAIA,EACJ,MAAO,qBAGE+D,GAAmB,SAACC,GAAD,OAAuB,SAAChE,GACpD,GAAIA,GAASA,EAAMiE,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,c,uCCDrCE,GAA2C,SAACT,GACAA,EAAvCU,MADkD,IAC3CC,EAAgCX,EAAhCW,KAAMC,EAA0BZ,EAA1BY,SACdC,GAFkD,aACVb,EADU,6BAEvCW,EAAKG,SAAWH,EAAKI,OAEtC,OACI,uBAAK9B,UAAWC,KAAE8B,YAAc,KAAOH,GAAY3B,KAAE6B,OAArD,UACI,+BACKH,IAEJC,GAAY,gCAAOF,EAAKI,YAMxBE,GAAwC,SAACjB,GAAW,IACtDU,EAAuCV,EAAvCU,MAA0BQ,GAAalB,EAAhCW,KAAgCX,EAA1BY,SADwC,aACdZ,EADc,8BAE5D,OAAO,eAAC,GAAD,2BAAiBA,GAAjB,aAAwB,qDAAcU,GAAWQ,QAG/CC,GAAqC,SAACnB,GAAW,IACnDU,EAAuCV,EAAvCU,MAA0BQ,GAAalB,EAAhCW,KAAgCX,EAA1BY,SADqC,aACXZ,EADW,8BAEzD,OAAO,eAAC,GAAD,2BAAiBA,GAAjB,aAAwB,kDAAWU,GAAWQ,QCpBnDE,GAAcd,GAAiB,ICgCrC,IAAMe,GAAsBC,aAAwB,CAAC7C,KAAM,kBAA/B6C,ED7B6C,SAACtB,GACtE,OACI,wBAAMuB,SAAUvB,EAAMwB,aAAtB,UACI,+BACI,eAACC,GAAA,EAAD,CACIxC,UAAWC,KAAEwC,SACbC,YAAY,qBACZ/F,KAAK,iBACLgG,UAAWX,GACXY,SAAU,CAACxB,GAAee,QAGlC,+BACI,0DEdVU,GAAkB,SAACvE,GAAD,MAA+C,CACnEZ,OAAQY,EAAMgB,KAAK5B,SAGhB,SAASoF,GAAoBC,GAUhC,OADiCC,YAAQH,GAARG,EAPP,SAACjC,GAAgC,IAClDrD,EAAwBqD,EAAxBrD,OAAWuE,EADsC,aACzBlB,EADyB,YAEtD,OAAKrD,EAEE,eAACqF,EAAD,eAAed,IAFF,eAAC,KAAD,CAAU7B,GAAI,cCR1C,IAMa6C,GAAmBC,YAC5BF,aAPoB,SAAC1E,GACrB,MAAO,CACH6E,iBAAkB7E,EAAMM,eAKH,CAACwE,WjB4BJ,SAACvE,GAAD,MACrB,CAACpC,KAAM,0BAA2BoC,qBiB5BnCiE,GAF4BI,EFNzB,SAAiBnC,GAEpB,IAAMsC,EAAkBtC,EAAMoC,iBAAiBzG,YAAYwC,KAAI,SAAAoE,GAAC,OAAI,eAACtC,GAAD,CACrDrE,KAAM2G,EAAE3G,KACnBR,GAAImH,EAAEnH,IADDmH,EAAEnH,OAELoH,EAAmBxC,EAAMoC,iBAAiBvG,aAAasC,KAAI,SAAAJ,GAAC,OAAI,eAACgC,GAAD,CAElEjE,eAAgBiC,EAAEjC,gBADbiC,EAAE3C,OASX,OACI,uBAAK6D,UAAWC,KAAEuD,QAAlB,UACI,sBAAKxD,UAAWC,KAAEwD,YAAlB,SACKJ,IAGL,uBAAKrD,UAAWC,KAAEyD,aAAlB,UACKH,EACD,eAACnB,GAAD,CAAqBE,SAbP,SAACqB,GACvB5C,EAAMqC,WAAWO,EAAS9E,4BGpBnB,OAA0B,iC,oBCOlC,SAAS+E,GAAM7C,GAKlB,IAHA,IAAI8C,EAAaC,KAAKC,KAAKhD,EAAMhE,gBAAkBgE,EAAM7F,UAErD8I,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAIf,OAFAE,QAAQC,IAAIrD,EAAM9D,qBAGd,iCACI,+BAEQ+G,EAAM9E,KAAI,SAAAR,GACN,OACI,uBAAcsB,UAAWe,EAAM9F,cAAgByD,EAAIuB,KAAEoE,aAAe,GAC9DC,QAAS,SAAAC,GAAC,OAAIxD,EAAMyD,cAAc9F,IADxC,SAEKA,GAFMA,QASvBqC,EAAMjE,MAAMoC,KAAI,SAAAC,GAIZ,OACI,iCACJ,kCACI,+BACI,eAAC,IAAD,CAASiB,GAAI,YAAcjB,EAAEhD,GAA7B,SACI,sBAAK+E,IAAwB,OAAnB/B,EAAEsF,OAAOC,MAAiBvF,EAAEsF,OAAOC,MAAQC,GAChD3E,UAAWC,KAAE0E,UAAWxD,IAAK,SAG1C,+BAEQhC,EAAEC,SAEE,yBAAQwF,SAAU7D,EAAM9D,oBAAoB4H,MAAK,SAAA1I,GAAE,OAAIA,IAAOgD,EAAEhD,MACxDmI,QAhBA,kBAAMvD,EAAM+D,SAAS3F,EAAEhD,KAe/B,sBAEE,yBAAQyI,SAAU7D,EAAM9D,oBAAoB4H,MAAK,SAAA1I,GAAE,OAAIA,IAAOgD,EAAEhD,MACxDmI,QAnBJ,kBAAMvD,EAAMgE,OAAO5F,EAAEhD,KAkBzB,yBAKV,kCACJ,+BACKgD,EAAExC,OAEP,+BACKwC,EAAEzD,YAGH,kCACA,+BAAM,uBACN,+BAAM,yBA7BAyD,EAAEhD,UCrCrB,WAA0B,sCCGlC,SAAS6I,KACZ,OAAO,qCACH,sBAAK9D,IAAK+D,GAAW9D,IAAK,OCH3B,IAAM+D,GAAW,SAAC5G,GACrB,OAAOA,EAAMW,UAAUnC,OAEdqI,GAAc,SAAC7G,GACxB,OAAOA,EAAMW,UAAU/D,UAEdkK,GAAqB,SAAC9G,GAC/B,OAAOA,EAAMW,UAAUlC,iBAEdsI,GAAiB,SAAC/G,GAC3B,OAAOA,EAAMW,UAAUhE,aAEdqK,GAAgB,SAAChH,GAC1B,OAAOA,EAAMW,UAAUjC,YAEduI,GAAyB,SAACjH,GACnC,OAAOA,EAAMW,UAAUhC,qBCDrBuI,G,4MAMFhB,cAAgB,SAACiB,GACb,EAAK1E,MAAM2E,aAAaD,EAAY,EAAK1E,MAAM7F,W,uDALnD,WACIyK,KAAK5E,MAAM2E,aAAaC,KAAK5E,MAAM9F,YAAa0K,KAAK5E,MAAM7F,Y,oBAO/D,WACI,OAAO,uCACFyK,KAAK5E,MAAM/D,WAAa,eAACgI,GAAD,IAAe,KACxC,eAACpB,GAAD,CACI7G,gBAAiB4I,KAAK5E,MAAMhE,gBAC5B7B,SAAUyK,KAAK5E,MAAM7F,SACrBD,YAAa0K,KAAK5E,MAAM9F,YACxBuJ,cAAemB,KAAKnB,cACpB1H,MAAO6I,KAAK5E,MAAMjE,MAClBiI,OAAQY,KAAK5E,MAAMgE,OACnBD,SAAUa,KAAK5E,MAAM+D,SACrB7H,oBAAqB0I,KAAK5E,MAAM9D,oBAChCM,0BAA2BoI,KAAK5E,MAAMxD,mC,GAtBzBqI,IAAM7C,WAkDpBG,eACXF,aAZoB,SAAC1E,GACrB,MAAO,CACHxB,MAAOoI,GAAS5G,GAChBpD,SAAUiK,GAAY7G,GACtBvB,gBAAiBqI,GAAmB9G,GACpCrD,YAAaoK,GAAe/G,GAC5BtB,WAAYsI,GAAchH,GAC1BrB,oBAAqBsI,GAAuBjH,MAKvB,CACrByG,OrB0Bc,SAACzJ,GAAD,8CAClB,WAAMwC,GAAN,SAAAC,EAAA,6DACID,EAASP,GAA0B,EAAMjC,IAD7C,SAEuBN,EAAqBM,GAF5C,cAGa0C,aAAehE,EAAiBiE,SACrCH,EAASZ,EAAc5B,IAE3BwC,EAASP,GAA0B,EAAOjC,IAN9C,2CADkB,uDqBzBdwJ,SrBmCgB,SAACxJ,GAAD,8CACpB,WAAMwC,GAAN,SAAAC,EAAA,6DACID,EAASP,GAA0B,EAAMjC,IAD7C,SAEuBN,EAAuBM,GAF9C,cAGa0C,aAAehE,EAAiBiE,SACrCH,EAASX,EAAgB7B,IAE7BwC,EAASP,GAA0B,EAAOjC,IAN9C,2CADoB,uDqBlChB8B,iBACAG,4BACAmI,arBYoB,SAACG,EAAc3K,GAAf,8CACxB,WAAM4C,GAAN,eAAAC,EAAA,6DACID,EAAST,GAAiB,IAC1BS,EAASV,EAAeyI,IAF5B,SAGuB7K,EAAkB6K,EAAM3K,GAH/C,OAGUG,EAHV,OAIIyC,EAAST,GAAiB,IAC1BS,EAtBH,CAACrB,KAAM,sBAAuBK,MAsBTzB,EAAKyK,QACvBhI,EAjBH,CAACrB,KAAM,kCAAmC4C,WAiBXhE,EAAKgE,aANrC,2CADwB,yDqBlBb6D,CASbsC,I,iDCzEWO,GAAyB,SAAC,GAA2C,IAA1CrK,EAAyC,EAAzCA,OAAQsK,EAAiC,EAAjCA,iBAAiC,EAE7CC,oBAAS,GAFoC,oBAEtEC,EAFsE,KAE5DC,EAF4D,OAGvCF,mBAASvK,GAH8B,oBAGtE0K,EAHsE,KAGzDC,EAHyD,KAK7EC,qBAAU,WACND,EAAe3K,KAChB,CAACA,IAcJ,OACI,kCAESwK,GACD,+BACI,uBAAMK,cAhBG,WACrBJ,GAAY,IAeA,sCAA+CzK,EAA/C,SAIJwK,GACA,+BACI,wBACIM,WAAS,EACTlJ,MAAO8I,EACPK,OAtBO,WACvBN,GAAY,GACZH,EAAiBI,IAqBDM,SAnBG,SAACnC,GACpB8B,EAAe9B,EAAEoC,cAAcrJ,gBCdhC,SAASsJ,GAAY7F,GACxB,OAAKA,EAAMxE,QAIP,uBAAKyD,UAAWC,KAAE4G,YAAlB,UACI,+BACI,sBACI3F,IAAI,oJACJC,IAAK,OAEb,uBAAKnB,UAAWC,KAAE6G,iBAAlB,UACI,sBACI5F,IAAKH,EAAMxE,QAAQkI,OAAOsC,MAAO5F,IAAK,KAC1C,eAAC,GAAD,CACIzF,OAAQqF,EAAMrF,OACdsK,iBAAkBjF,EAAMiF,yBAd7B,eAAChB,GAAD,I,yBCDR,SAASgC,GAAKjG,GACjB,OACI,uBAAKf,UAAWC,KAAEE,KAAlB,UACI,sBAAKe,IAAI,6FAA6FC,IAAK,KAC1GJ,EAAM1E,QACP,+BACI,gCAAO0E,EAAMzE,kB,wBCLvB2K,GAAc5F,GAAiB,ICDxB6F,GAAUtB,IAAMuB,MAAK,SAACpG,GAE/B,IAAMqG,EAAgBrG,EAAM7E,UAAUgD,KAAI,SAAAR,GAAC,OACvC,eAACsI,GAAD,CAAiB3K,QAASqC,EAAErC,QAASC,WAAYoC,EAAEpC,YAAxCoC,EAAEvC,OAMjB,OACI,uBAAK6D,UAAWC,KAAEoH,QAAlB,UACI,2CACA,eAACC,GAAD,CAAkBhF,SAPH,SAACqB,GACpB5C,EAAMwG,QAAQ5D,EAASnF,gBAQnB,+BACK4I,UAOXE,GAAmBjF,aAAwB,CAAC7C,KAAM,eAA/B6C,EDlB6C,SAACtB,GAGnE,OACI,wBAAMuB,SAAUvB,EAAMwB,aAAtB,UACI,+BACI,eAACC,GAAA,EAAD,CACIE,YAAY,aACZ/F,KAAK,cACLgG,UAAWX,GACXY,SAAU,CAACxB,GAAe6F,QAGlC,+BACI,yBAAQjH,UAAWC,KAAEuH,OAArB,8BEbHC,GAAmBzE,aANR,SAAC1E,GACrB,MAAO,CACHpC,UAAWoC,EAAMD,YAAYnC,aAIoB,CACrDqL,Q9BsCmB,SAAC/I,GAAD,MAClB,CAAC/B,KAAM,uBAAwB+B,iB8BxCJwE,CAE7BkE,ICRI,SAASQ,GAAQ3G,GACpB,OACI,uBAAKf,UAAWC,KAAE1D,QAAlB,UACI,eAACqK,GAAD,CACIrK,QAASwE,EAAMxE,QACfb,OAAQqF,EAAMrF,OACdsK,iBAAkBjF,EAAMiF,mBAE5B,eAACyB,GAAD,O,ICJNE,G,uKAEF,WACI,IAAIrM,EAASqK,KAAK5E,MAAM6G,MAAMC,OAAOvM,OAChCA,IACDA,EAASwM,KAAKC,UAAUpC,KAAK5E,MAAMiH,oBAE/BrC,KAAK5E,MAAMkH,QAAQ/D,KAAK,UAGhCyB,KAAK5E,MAAMmH,eAAe5M,GAC1BqK,KAAK5E,MAAMoH,cAAc7M,K,oBAG7B,WACI,OACI,sBAAK0E,UAAWC,KAAE1D,QAAlB,SACI,eAACmL,GAAD,CACInL,QAASoJ,KAAK5E,MAAMxE,QACpBb,OAAQiK,KAAK5E,MAAMrF,OACnBsK,iBAAkBL,KAAK5E,MAAMiF,yB,GApBlBJ,IAAM7C,WAmCtBG,eACXF,aAToB,SAAC1E,GAAD,MAA+C,CACnE/B,QAAS+B,EAAMD,YAAY9B,QAC3Bb,OAAQ4C,EAAMD,YAAY3C,OAC1BsM,iBAAkB1J,EAAMgB,KAAKhE,OAC7BoC,OAAQY,EAAMgB,KAAK5B,UAKM,CAACwK,ehCmBA,SAAC5M,GAAD,8CAC1B,WAAMwC,GAAN,eAAAC,EAAA,sEACuBtC,EAAsBH,GAD7C,OACUD,EADV,OAEIyC,EAbH,CAACrB,KAAM,+BAAgCF,QAaZlB,IAF5B,2CAD0B,uDgCnBgB8M,chCyBjB,SAAC7M,GAAD,8CACzB,WAAMwC,GAAN,eAAAC,EAAA,sEACuBtC,EAAqBH,GAD5C,OACUD,EADV,OAEIyC,EAAStB,EAAUnB,IAFvB,2CADyB,uDgCzBgC2K,iBhC+B7B,SAACtK,GAAD,8CAC5B,WAAMoC,GAAN,SAAAC,EAAA,sEACuBtC,EAAwBC,GAD/C,OAE4B,IAF5B,OAEasC,YACLF,EAAStB,EAAUd,IAH3B,2CAD4B,yDgC9B5B0M,KACAtF,GAHWI,CAIbyE,I,oBClDa,OAA0B,wCCWlC,SAASU,GAAOtH,GACnB,OACI,0BAAQf,UAAWC,KAAEqI,OAArB,UACI,sBACIpH,IAAKqH,GAAepH,IAAK,KAC7B,sBAAKnB,UAAWC,KAAEuI,WAAlB,SACKzH,EAAMrD,OACD,iCAAMqD,EAAMtD,MAAZ,IAAmB,yBAAQ6G,QAASvD,EAAM0H,OAAvB,wBAEnB,eAAC,IAAD,CAASrI,GAAI,SAAb,wBCLtB,IAMMsI,G,4JACF,WACI,OACI,eAACL,GAAD,eAAY1C,KAAK5E,Y,GAHC6E,IAAM7C,WAQrBC,gBAdS,SAAC1E,GAAD,MAA+C,CACnEZ,OAAQY,EAAMgB,KAAK5B,OACnBD,MAAOa,EAAMgB,KAAK7B,SAYkB,CAACgL,O/B2BnB,yDAAoB,WAAM3K,GAAN,SAAAC,EAAA,sEACnBnC,IADmB,cAE7BoC,aAAehE,EAAiBiE,SACrCH,EAASH,EAAgB,KAAM,KAAM,MAAM,GAAO,IAHhB,2CAApB,wD+B3BPqF,CAAmC0F,ICiC5CC,GAAiBtG,aAAwB,CAAC7C,KAAM,SAA/B6C,EAnCsC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcT,EAAW,EAAXA,MACzE,OACI,wBAAMQ,SAAUC,EAAhB,UACI,+BACI,eAACC,GAAA,EAAD,CACIE,YAAa,QACb/F,KAAM,QACNgG,UAAWT,GACXU,SAAU,CAACxB,QAGnB,+BACI,eAACoB,GAAA,EAAD,CACIE,YAAa,WACb/F,KAAM,WACNgG,UAAWT,GACXU,SAAU,CAACxB,IACX3E,KAAM,eAGd,iCACI,eAAC+F,GAAA,EAAD,CACI/F,KAAK,WACLE,KAAK,aACLgG,UAAWT,KAJnB,kBAOCJ,GAAS,sBAAK9B,UAAWC,KAAE2I,iBAAlB,SAAqC9G,IAC/C,+BACI,oDA+BDkB,gBAtBS,SAAC1E,GAAD,MAA+C,CACnEtC,QAASsC,EAAMgB,KAAKtD,QACpB0B,OAAQY,EAAMgB,KAAK5B,UAoBiB,CAACD,MhC5CpB,SAAC5B,EAAeC,EAAkBC,EAAqBC,GAAvD,8CAA0F,WAAM8B,GAAN,eAAAC,EAAA,sEACxFnC,EAAcC,EAAOC,EAAUC,EAAYC,GAD6C,QACrGX,EADqG,QAElG2C,aAAehE,EAAiBiE,QACrCH,EAASD,KAELxC,EAAKwN,SAAStH,OACdzD,EAASgL,YAAW,QAAS,CAACC,OAAQ1N,EAAKwN,SAAS,MAEpD/K,EAASgL,YAAW,QAAS,CAACC,OAAQ,gBAR6D,2CAA1F,wDgC4CN/F,EA5EuD,SAACjC,GAInE,OAAIA,EAAMrD,OACC,eAAC,KAAD,CAAU0C,GAAI,aAGrB,iCACI,wCACA,eAACuI,GAAD,CAAgBrG,SATP,SAACqB,GACd5C,EAAMtD,MAAMkG,EAAS9H,MAAO8H,EAAS7H,SAAU6H,EAAS5H,WAAY4H,EAAS3H,kBCM/EgN,G,uKACF,WACIrD,KAAK5E,MAAMkI,kB,oBAGf,WACI,OAAKtD,KAAK5E,MAAM7C,YAKZ,uBAAK8B,UAAWC,IAAEiJ,WAAlB,UACI,eAAC,GAAD,IACA,eAACnJ,GAAD,IACA,uBAAKC,UAAWC,IAAEkJ,kBAAlB,UACI,eAAC,KAAD,CAAOC,OAAK,EAACnI,KAAK,oBAAoBoI,OAAQ,kBAAM,eAAC,GAAD,OACpD,eAAC,KAAD,CAAOD,OAAK,EAACnI,KAAK,WAAWoI,OAAQ,kBAAM,eAACpG,GAAD,OAC3C,eAAC,KAAD,CAAOmG,OAAK,EAACnI,KAAK,SAASoI,OAAQ,kBAAM,eAAC,GAAD,OACzC,eAAC,KAAD,CAAOD,OAAK,EAACnI,KAAK,QAAQoI,OAAQ,kBAAM,eAAC7I,GAAD,OACxC,eAAC,KAAD,CAAO4I,OAAK,EAACnI,KAAK,SAASoI,OAAQ,kBAAM,eAAC3I,GAAD,OACzC,eAAC,KAAD,CAAO0I,OAAK,EAACnI,KAAK,YAAYoI,OAAQ,kBAAM,eAACzI,GAAD,OAC5C,eAAC,KAAD,CAAOwI,OAAK,EAACnI,KAAK,SAASoI,OAAQ,kBAAM,eAAC,GAAD,aAd1C,eAACrE,GAAD,Q,GAPDY,IAAM7C,WA0CTG,eACXkF,KACApF,aAhBoB,SAAC1E,GAAD,MAA+C,CACnEJ,YAAaI,EAAMiB,IAAIrB,eAeE,CAAC+K,chClCD,yDAAoB,WAAMnL,GAAN,eAAAC,EAAA,sDACzCuL,EAAUxL,EAASD,KACvB0L,QAAQC,IAAI,CAACF,IACRlP,MAAK,WACF0D,EAR6B,CAACrB,KAAM,+BAIC,2CAApB,yDgCgCdyG,CAEgC8F,ICtD/CS,IAASJ,OACL,eAAC,IAAMK,WAAP,UACI,eAAC,IAAD,UACI,eAAC,IAAD,CAAUhK,MAAOA,EAAjB,SACI,eAAC,GAAD,UAIZiK,SAASC,eAAe,SAO5B3P,K,mBCvBAH,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,4B,mBCA3GD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,mBCA3HD,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,mBCA9DD,EAAOC,QAAU,CAAC,WAAa,wBAAwB,kBAAoB,iC,mBCA3ED,EAAOC,QAAU,CAAC,KAAO,yBAAyB,WAAa,iC,mBCA/DD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,aAAe,8B,mBCAtED,EAAOC,QAAU,CAAC,YAAc,iCAAiC,iBAAmB,wC,mBCApFD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,8B","file":"static/js/main.b0fa1484.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__1E9ra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__P7Nrm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__hPAd8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1jjej\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1AFhw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__6-fH1\",\"item\":\"Navbar_item__3Ldnh\",\"activeLink\":\"Navbar_activeLink__uFs2O\"};","import axios from 'axios';\r\nimport {ProfileType} from '../redux/profile-reducer';\r\nimport {UsersType} from '../redux/users-reducer';\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '56cc9d09-6ac5-48a7-98d1-6f7ea21ef704',\r\n    },\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => res.data)\r\n    },\r\n    followUsers(userId: string) {\r\n        return instance.post<CommonResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    unfollowUsers(userId: string) {\r\n        return instance.delete<CommonResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`/profile/status/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`/profile/status`, {status})\r\n            .then(res => res.data)\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<CommonResponseType<GetAuthUserData>>(`auth/me`)\r\n            .then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: boolean) {\r\n        return instance.post<CommonResponseType<{ userId: string }>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n            .then(res => res.data)\r\n    },\r\n}\r\n\r\n//types\r\nexport enum ResponseStatuses {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10,\r\n}\r\n\r\ntype GetUsersType = {\r\n    items: UsersType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\n\r\ntype GetAuthUserData = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {v1} from 'uuid';\r\nimport {AppThunkType} from './store';\r\nimport {profileAPI} from '../api/api';\r\n\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {id: v1(), message: 'Hello', likesCount: 11},\r\n        {id: v1(), message: 'Buy', likesCount: 15},\r\n        {id: v1(), message: 'How are you?', likesCount: 7},\r\n        {id: v1(), message: 'I am fine, and you?', likesCount: 5},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'profilePage/ADD-POST':\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData,\r\n                    {id: v1(), message: action.newPostText, likesCount: 0}\r\n                ],\r\n            }\r\n        case 'profilePage/SET-USER-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'profilePage/SET-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'profilePage/REMOVE-POST':\r\n            return {\r\n                ...state,\r\n                postsData: [\r\n                    ...state.postsData.filter(p => p.id !== action.postId)\r\n                ],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const addPost = (newPostText: string) =>\r\n    ({type: 'profilePage/ADD-POST', newPostText} as const)\r\n\r\nexport const setUserProfile = (profile: ProfileType | null) =>\r\n    ({type: 'profilePage/SET-USER-PROFILE', profile} as const)\r\n\r\nexport const setStatus = (status: string) =>\r\n    ({type: 'profilePage/SET-STATUS', status} as const)\r\n\r\nexport const removePost = (postId: string) =>\r\n    ({type: 'profilePage/REMOVE-POST', postId} as const)\r\n\r\n\r\n//thunks\r\nexport const getUserProfile = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const data = await profileAPI.getProfile(userId)\r\n        dispatch(setUserProfile(data))\r\n    }\r\n\r\nexport const getUserStatus = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        const data = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(data))\r\n    }\r\n\r\nexport const updateUserStatus = (status: string): AppThunkType =>\r\n    async dispatch => {\r\n        const data = await profileAPI.updateStatus(status)\r\n        if (data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n\r\n\r\n//types\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type AddPostActionType = ReturnType<typeof addPost>\r\nexport type SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\nexport type SetStatusActionType = ReturnType<typeof setStatus>\r\nexport type RemovePostActionType = ReturnType<typeof removePost>\r\n\r\nexport type ProfileActionsType =\r\n    | AddPostActionType\r\n    | SetUserProfileActionType\r\n    | SetStatusActionType\r\n    | RemovePostActionType","import {v1} from 'uuid';\r\n\r\n\r\nconst initialState = {\r\n    dialogsData: [\r\n        {id: v1(), name: 'Marta'},\r\n        {id: v1(), name: 'Sasha'},\r\n        {id: v1(), name: 'Vera'},\r\n        {id: v1(), name: 'Anton'},\r\n        {id: v1(), name: 'Vanya'},\r\n    ] as Array<DialogItemType>,\r\n    messagesData: [\r\n        {id: v1(), messageContent: 'Hello'},\r\n        {id: v1(), messageContent: 'How are you?'},\r\n        {id: v1(), messageContent: 'Yo'},\r\n    ] as Array<MessageItemType>,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: DialogsActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'dialogsPage/ADD-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [\r\n                    ...state.messagesData,\r\n                    {id: v1(), messageContent: action.newMessageText}\r\n                ],\r\n            }\r\n        case 'dialogsPage/REMOVE-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messagesData: [\r\n                    ...state.messagesData.filter(m => m.id !== action.messageId)\r\n                ],\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const addMessage = (newMessageText: string) =>\r\n    ({type: 'dialogsPage/ADD-MESSAGE', newMessageText} as const)\r\n\r\nexport const removeMessage = (messageId: string) =>\r\n    ({type: 'dialogsPage/REMOVE-MESSAGE', messageId} as const)\r\n\r\n\r\n//types\r\nexport type MessageItemType = {\r\n    id?: string\r\n    messageContent: string\r\n}\r\nexport type DialogItemType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type AddMessageActionType = ReturnType<typeof addMessage>\r\nexport type RemoveMessageActionType = ReturnType<typeof removeMessage>\r\nexport type DialogsActionsType =\r\n    | AddMessageActionType\r\n    | RemoveMessageActionType","export type SidebarActionsType = ReturnType<any>\r\n\r\n\r\nconst initialState = {}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const sidebarReducer = (state: InitialStateType = initialState, action: SidebarActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'sidebar/':\r\n            return {\r\n                ...state,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {ResponseStatuses, usersAPI} from '../api/api';\r\nimport {AppThunkType} from './store';\r\n\r\n\r\nconst initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as string[],\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: UsersActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'usersPage/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: true} : u)\r\n            }\r\n        case 'usersPage/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => u.id === action.userId ? {...u, followed: false} : u)\r\n            }\r\n        case 'usersPage/SET-USERS':\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'usersPage/SET-CURRENT-PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'usersPage/SET-TOTAL-USERS-COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case 'usersPage/TOGGLE-IS-FETCHING':\r\n            return {\r\n                ...state,\r\n                isFetching: action.value\r\n            }\r\n        case 'usersPage/TOGGLE-IS-FOLLOWING-PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress:\r\n                    action.inProgress\r\n                        ? [...state.followingInProgress, action.userId]\r\n                        : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const followSuccess = (userId: string) =>\r\n    ({type: 'usersPage/FOLLOW', userId} as const)\r\n\r\nexport const unfollowSuccess = (userId: string) =>\r\n    ({type: 'usersPage/UNFOLLOW', userId} as const)\r\n\r\nexport const setUsers = (users: Array<UsersType>) =>\r\n    ({type: 'usersPage/SET-USERS', users} as const)\r\n\r\nexport const setCurrentPage = (currentPage: number) =>\r\n    ({type: 'usersPage/SET-CURRENT-PAGE', currentPage} as const)\r\n\r\nexport const setTotalUsersCount = (totalCount: number) =>\r\n    ({type: 'usersPage/SET-TOTAL-USERS-COUNT', totalCount} as const)\r\n\r\nexport const toggleIsFetching = (value: boolean) =>\r\n    ({type: 'usersPage/TOGGLE-IS-FETCHING', value} as const)\r\n\r\nexport const toggleIsFollowingProgress = (inProgress: boolean, userId: string) =>\r\n    ({type: 'usersPage/TOGGLE-IS-FOLLOWING-PROGRESS', inProgress, userId} as const)\r\n\r\n\r\n//thunks\r\nexport const requestUsers = (page: number, pageSize: number): AppThunkType =>\r\n    async dispatch => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        const data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n\r\nexport const follow = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        dispatch(toggleIsFollowingProgress(true, userId))\r\n        const data = await usersAPI.followUsers(userId)\r\n        if (data.resultCode === ResponseStatuses.success) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userId))\r\n    }\r\n\r\nexport const unfollow = (userId: string): AppThunkType =>\r\n    async dispatch => {\r\n        dispatch(toggleIsFollowingProgress(true, userId))\r\n        const data = await usersAPI.unfollowUsers(userId)\r\n        if (data.resultCode === ResponseStatuses.success) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n        dispatch(toggleIsFollowingProgress(false, userId))\r\n    }\r\n\r\n//types\r\nexport type UsersType = {\r\n    id: string\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    uniqueUrlName: string | null\r\n    location?: {\r\n        city: string\r\n        country: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type FollowSuccessActionType = ReturnType<typeof followSuccess>\r\nexport type UnfollowSuccessActionType = ReturnType<typeof unfollowSuccess>\r\nexport type SetUsersActionType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageActionType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountActionType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingActionType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleIsFollowingProgressActionType = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport type UsersActionsType =\r\n    | FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalUsersCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | ToggleIsFollowingProgressActionType","import {authAPI, ResponseStatuses} from '../api/api';\r\nimport {AppThunkType} from './store';\r\nimport {stopSubmit} from 'redux-form';\r\n\r\n\r\nconst initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    captcha: false,\r\n    isAuth: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'auth/SET-USER-DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, captcha: boolean, isAuth: boolean) =>\r\n    ({type: 'auth/SET-USER-DATA', payload: {userId, email, login, captcha, isAuth}} as const)\r\n\r\n\r\n//thunks\r\nexport const getAuthUserData = (): AppThunkType => async dispatch => {\r\n    const data = await authAPI.authMe()\r\n    if (data.resultCode === ResponseStatuses.success) {\r\n        let {id, email, login} = data.data\r\n        dispatch(setAuthUserData(id, email, login, true, true))\r\n    }\r\n    return data\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: boolean): AppThunkType => async dispatch => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResponseStatuses.success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.messages.length) {\r\n            dispatch(stopSubmit('login', {_error: data.messages[0]}))\r\n        } else {\r\n            dispatch(stopSubmit('login', {_error: 'Some error'}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (): AppThunkType => async dispatch => {\r\n    const data = await authAPI.logout()\r\n    if (data.resultCode === ResponseStatuses.success) {\r\n        dispatch(setAuthUserData(null, null, null, false, false))\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type SetAuthUserDataActionType = ReturnType<typeof setAuthUserData>\r\nexport type AuthActionsType = SetAuthUserDataActionType","import {AppThunkType} from './store';\r\nimport {getAuthUserData} from './auth-reducer';\r\n\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: InitializedAppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'app/INITIALIZED-SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const initializedSuccess = () => ({type: 'app/INITIALIZED-SUCCESS'} as const)\r\n\r\n\r\n//thunks\r\nexport const initializeApp = (): AppThunkType => async dispatch => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type InitializedSuccessActionType = ReturnType<typeof initializedSuccess>\r\nexport type InitializedAppActionsType = InitializedSuccessActionType","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {ProfileActionsType, profileReducer} from './profile-reducer';\r\nimport {DialogsActionsType, dialogsReducer} from './dialogs-reducer';\r\nimport {SidebarActionsType, sidebarReducer} from './sidebar-reducer';\r\nimport {UsersActionsType, usersReducer} from './users-reducer';\r\nimport {AuthActionsType, authReducer} from './auth-reducer';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer, InitializedAppActionsType} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppActionsType =\r\n    | AuthActionsType\r\n    | DialogsActionsType\r\n    | ProfileActionsType\r\n    | SidebarActionsType\r\n    | UsersActionsType\r\n    | InitializedAppActionsType\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppStateType,\r\n    unknown,\r\n    AppActionsType>\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Navbar.module.css'\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport s from './News.module.css'\r\n\r\n\r\nexport function News() {\r\n    return (\r\n        <div className={s.news}>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Music.module.css'\r\n\r\n\r\nexport function Music() {\r\n    return (\r\n        <div className={s.music}>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\n\r\nexport function Settings() {\r\n    return (\r\n        <div className={s.settings}>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './Message.module.css'\r\nimport {MessageItemType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nexport function Message(props: MessageItemType) {\r\n\r\n    return (\r\n        <div className={s.message}>{props.messageContent}</div>\r\n    )\r\n}","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogItem.module.css'\r\nimport {DialogItemType} from '../../../redux/dialogs-reducer';\r\n\r\n\r\nexport function DialogItem(props: DialogItemType) {\r\n    const path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={`${s.item} ${s.activeLink}`}>\r\n            <NavLink to={path}>\r\n                <img src=\"https://avatars.mds.yandex.net/get-pdb/1025945/a6f96698-c78d-44fb-b802-38e74e0164dd/s1200\" alt={''}/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","export const requiredField = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React from 'react'\r\nimport {WrappedFieldProps} from 'redux-form/lib/Field';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError && s.error)}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport s from '../Dialogs.module.css';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    className={s.textarea}\r\n                    placeholder='Enter your message'\r\n                    name='newMessageText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n//types\r\nexport type FormDataType = {\r\n    newMessageText: string\r\n}","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {DialogsType} from './DialogsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddMessageForm, FormDataType} from './Message/AddMessageForm';\r\n\r\n\r\nexport function Dialogs(props: DialogsType) {\r\n\r\n    const dialogsElements = props.stateDialogsPage.dialogsData.map(d => <DialogItem\r\n        key={d.id} name={d.name}\r\n        id={d.id}/>)\r\n    const messagesElements = props.stateDialogsPage.messagesData.map(m => <Message\r\n        key={m.id}\r\n        messageContent={m.messageContent}/>)\r\n\r\n\r\n    const onClickAddMessage = (formData: FormDataType) => {\r\n        props.addMessage(formData.newMessageText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messagesItem}>\r\n                {messagesElements}\r\n                <AddMessageReduxForm onSubmit={onClickAddMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'addMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","import {addMessage, InitialStateType} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ComponentType} from 'react';\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        stateDialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {addMessage,}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    stateDialogsPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\nexport type DialogsType = MapStateToPropsType & MapDispatchToPropsType","export default __webpack_public_path__ + \"static/media/user.4409fc97.png\";","import React from 'react';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport s from './Users.module.css';\r\nimport {UsersType} from '../../redux/users-reducer';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nexport function Users(props: UsersPropsType) {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    console.log(props.followingInProgress)\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    pages.map(p => {\r\n                        return (\r\n                            <span key={p} className={props.currentPage === p ? s.selectedPage : ''}\r\n                                  onClick={e => props.onPageChanged(p)}>\r\n                                {p}\r\n                            </span>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            {\r\n                props.users.map(u => {\r\n                    const onClickFollow = () => props.follow(u.id)\r\n                    const onClickUnFollow = () => props.unfollow(u.id)\r\n\r\n                    return (\r\n                        <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                                <img src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                                     className={s.userPhoto} alt={''}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                u.followed\r\n                                    ?\r\n                                    <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                            onClick={onClickUnFollow}>unFollow</button>\r\n                                    : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                              onClick={onClickFollow}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                            <span>\r\n                        <div>\r\n                            {u.name}\r\n                        </div>\r\n                        <div>\r\n                            {u.status}\r\n                        </div>\r\n                    </span>\r\n                            <span>\r\n                            <div>{'u.location.country'}</div>\r\n                            <div>{'u.location.city'}</div>\r\n                    </span>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersType>\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    followingInProgress: string[]\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: string) => void\r\n}","export default __webpack_public_path__ + \"static/media/preloader.5665744c.svg\";","import preloader from '../../../assets/images/preloader.svg';\r\nimport React from 'react';\r\n\r\nexport function Preloader() {\r\n    return <>\r\n        <img src={preloader} alt={''}/>\r\n    </>\r\n}","import {AppStateType} from './store';\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import {connect} from 'react-redux';\r\nimport {follow, requestUsers, setCurrentPage, toggleIsFollowingProgress, unfollow, UsersType} from '../../redux/users-reducer';\r\nimport {AppStateType} from '../../redux/store';\r\nimport React, {ComponentType} from 'react';\r\nimport {Users} from './Users';\r\nimport {Preloader} from '../common/Preloader/Preloader';\r\nimport {compose} from 'redux';\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from '../../redux/users-selectors';\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.requestUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n                toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n// const mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress,\r\n//     }\r\n// }\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        setCurrentPage,\r\n        toggleIsFollowingProgress,\r\n        requestUsers,\r\n    }),\r\n    //withAuthRedirect\r\n)(UsersContainer)\r\n\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: string[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: string) => void\r\n    unfollow: (userId: string) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleIsFollowingProgress: (isFetching: boolean, userId: string) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n}\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\n\r\nexport const ProfileStatusWithHooks = ({status, updateUserStatus}: PropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [statusValue, setStatusValue] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setStatusValue(status)\r\n    }, [status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateUserStatus(statusValue)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{`🖊️ ${status} `}</span>\r\n                </div>\r\n            }\r\n            {\r\n                editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus\r\n                        value={statusValue}\r\n                        onBlur={deactivateEditMode}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\n\r\nexport function ProfileInfo(props: PropsType) {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img\r\n                    src=\"https://images.ctfassets.net/hrltx12pl8hq/7yQR5uJhwEkRfjwMFJ7bUK/dc52a0913e8ff8b5c276177890eb0129/offset_comp_772626-opt.jpg?fit=fill&w=800&h=300\"\r\n                    alt={''}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img\r\n                    src={props.profile.photos.large} alt={''}/>\r\n                <ProfileStatusWithHooks\r\n                    status={props.status}\r\n                    updateUserStatus={props.updateUserStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport function Post(props: PropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg\" alt={''}/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {maxLengthCreator, requiredField} from '../../../utils/validators/validators';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps} from 'redux-form';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\n\r\nexport type FormDataType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='enter text'\r\n                    name='newPostText'\r\n                    component={Textarea}\r\n                    validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.button}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react'\r\nimport {Post} from './Post/Post'\r\nimport s from './MyPosts.module.css'\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {reduxForm} from 'redux-form';\r\nimport {AddPostForm, FormDataType} from './AddPostForm';\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    const postsElements = props.postsData.map(p =>\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onClickAddPost = (formData: FormDataType) => {\r\n        props.addPost(formData.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onClickAddPost}/>\r\n\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'addPostForm'})(AddPostForm)\r\n","import {addPost, PostType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/store';\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n})(MyPosts)\r\n\r\n\r\n//types\r\nexport type MapStateToPropsType = {\r\n    postsData: Array<PostType>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\nexport type MyPostsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\n\r\nexport function Profile(props: PropsType) {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n//types\r\ntype PropsType= {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n","import React, {ComponentType} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {getUserProfile, getUserStatus, ProfileType, updateUserStatus,} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = JSON.stringify(this.props.authorizedUserId)\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profile}>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//types\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n","export default __webpack_public_path__ + \"static/media/Logo_header.8aaf41b6.png\";","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\nimport LogoForHeader from '../../assets/images/Logo_header.png';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nexport function Header(props: PropsType) {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src={LogoForHeader} alt={''}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} <button onClick={props.logout}>Log out</button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from 'react'\r\nimport {Header} from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {logout} from '../../redux/auth-reducer';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\nexport type HeaderPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType> {\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/formsControls/FormsControls';\r\nimport {requiredField} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport s from '../common/formsControls/FormsControls.module.css'\r\n\r\n\r\nconst Login: React.FC<MapStateToPropsType & MapDispatchToPropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Email'}\r\n                    name={'email'}\r\n                    component={Input}\r\n                    validate={[requiredField]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    placeholder={'Password'}\r\n                    name={'password'}\r\n                    component={Input}\r\n                    validate={[requiredField]}\r\n                    type={'password'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    type=\"checkbox\"\r\n                    name=\"rememberMe\"\r\n                    component={Input}\r\n                /> remember me\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\n\r\nconst MapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    captcha: state.auth.captcha,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n//types\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: boolean\r\n}\r\ntype MapStateToPropsType = {\r\n    captcha: boolean | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: boolean) => void\r\n}\r\n\r\n\r\nexport default connect(MapStateToProps, {login})(Login)","import React, {ComponentType} from 'react'\r\nimport s from './App.module.css'\r\nimport {Navbar} from './components/Navbar/Navbar'\r\nimport {News} from './components/News/News';\r\nimport {Music} from './components/Music/Music';\r\nimport {Settings} from './components/Settings/Settings';\r\nimport {Route, withRouter} from 'react-router-dom'\r\nimport {DialogsContainer} from './components/Dialogs/DialogsContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport {AppStateType} from './redux/store';\r\nimport {Preloader} from './components/common/Preloader/Preloader';\r\n\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <div className={s.appWrapper}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className={s.appWrapperContent}>\r\n                    <Route exact path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n                    <Route exact path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n                    <Route exact path=\"/users\" render={() => <UsersContainer/>}/>\r\n                    <Route exact path=\"/news\" render={() => <News/>}/>\r\n                    <Route exact path=\"/music\" render={() => <Music/>}/>\r\n                    <Route exact path=\"/settings\" render={() => <Settings/>}/>\r\n                    <Route exact path=\"/login\" render={() => <Login/>}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    initialized: state.app.initialized,\r\n})\r\n\r\n//types\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\nexport type AppPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App)\r\n\r\n\r\n","import React from 'react'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport ReactDOM from 'react-dom'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Dn8Z\",\"dialogsItem\":\"Dialogs_dialogsItem__1NNkN\",\"textarea\":\"Dialogs_textarea__2IKdi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2Z8L4\",\"error\":\"FormsControls_error__BtpDs\",\"formSummaryError\":\"FormsControls_formSummaryError__2qS17\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__395W3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1Sq30\",\"button\":\"MyPosts_button__3kRgS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1upY6\",\"appWrapperContent\":\"App_appWrapperContent__1w-fS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogItem_item__FOhNE\",\"activeLink\":\"DialogItem_activeLink__1OjsT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__Sr8R7\",\"selectedPage\":\"Users_selectedPage__3gyJ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__26XEX\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2MG0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__tmv2U\",\"loginBlock\":\"Header_loginBlock__1H5dx\"};"],"sourceRoot":""}