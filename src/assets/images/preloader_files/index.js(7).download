(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by LiveScript 1.3.0
(function(){
  var ret;
  ret = {
    id: 'cube',
    type: 'spinner',
    name: 'Cube',
    desc: "Pulsing blocks with different colors",
    tags: ['pulse', 'beat', 'square', 'block', 'rectangle'],
    slug: "pulsing-squares-loader",
    license: 'free',
    edit: {
      c1: {
        name: "Color 1",
        type: 'color',
        'default': '#e15b64',
        priority: 1.1
      },
      c2: {
        name: "Color 2",
        type: 'color',
        'default': '#f47e60',
        priority: 1.2
      },
      c3: {
        name: "Color 3",
        type: 'color',
        'default': '#f8b26a',
        priority: 1.3
      },
      c4: {
        name: "Color 4",
        type: 'color',
        'default': '#abbd81',
        priority: 1.4
      },
      blockSize: {
        name: "Block Size",
        type: 'number',
        'default': 40,
        min: 0,
        max: 49,
        priority: 1.5
      },
      mag: {
        name: "Strength",
        type: 'number',
        'default': 1.15,
        min: 1.1,
        max: 2,
        step: 0.01,
        priority: 1.6
      }
    },
    watch: function(n, o){
      this.local.dp = -n.blockSize / 2;
      return import$(this.local, {
        vs: [n.mag, 1].join(";"),
        b1: -0.3 / n.speed,
        b2: -0.2 / n.speed,
        b3: -0.1 / n.speed,
        b4: 0
      });
    },
    download: function(arg$){
      var type, ref$, cfg, lc, s, html, v1, v2, half, css;
      type = arg$.type;
      if (type !== 'css') {
        return;
      }
      ref$ = [this.config, this.local], cfg = ref$[0], lc = ref$[1];
      console.log(this.local);
      s = (ref$ = cfg.size / 100) > 1 ? ref$ : 1;
      html = "<div></div><div></div><div></div><div></div>";
      v1 = cfg.blockSize / 2 + 2 * (50 - cfg.blockSize) / 3;
      v2 = 100 - cfg.blockSize / 2 - 2 * (50 - cfg.blockSize) / 3;
      half = cfg.blockSize / 2;
      css = "@keyframes $id {\n  0% { transform: scale(" + cfg.mag + ") }\n  100% { transform: scale(1) }\n}\n.$id div {\n  position: absolute;\n  width: " + cfg.blockSize * s + "px;\n  height: " + cfg.blockSize * s + "px;\n  top: " + s * (v1 - half) + "px;\n  left: " + s * (v1 - half) + "px;\n  background: " + cfg.c1 + ";\n  animation: $id " + 1 / cfg.speed + "s cubic-bezier(0,0.5,0.5,1) infinite;\n  animation-delay: " + lc.b1 + "s;\n}\n.$id div:nth-child(2) {\n  top: " + s * (v1 - half) + "px;\n  left: " + s * (v2 - half) + "px;\n  background: " + cfg.c2 + ";\n  animation-delay: " + lc.b2 + "s;\n}\n.$id div:nth-child(3) {\n  top: " + s * (v2 - half) + "px;\n  left: " + s * (v1 - half) + "px;\n  background: " + cfg.c4 + ";\n  animation-delay: " + lc.b4 + "s;\n}\n.$id div:nth-child(4) {\n  top: " + s * (v2 - half) + "px;\n  left: " + s * (v2 - half) + "px;\n  background: " + cfg.c3 + ";\n  animation-delay: " + lc.b3 + "s;\n}";
      return {
        html: html,
        css: css
      };
    },
    dom: function(config){
      var spline, lc, vs, ts, v1, v2, svg;
      spline = "0 0.5 0.5 1";
      lc = this.local;
      vs = this.local.vs;
      ts = "0;1";
      v1 = config.blockSize / 2 + 2 * (50 - config.blockSize) / 3;
      v2 = 100 - config.blockSize / 2 - 2 * (50 - config.blockSize) / 3;
      svg = "<g transform=\"translate(" + v1 + "," + v1 + ")\">\n  <rect x=\"" + lc.dp + "\" y=\"" + lc.dp + "\" width=\"" + config.blockSize + "\"\n  height=\"" + config.blockSize + "\" fill=\"" + config.c1 + "\">\n    <animateTransform attributeName=\"transform\" type=\"scale\" repeatCount=\"indefinite\" dur=\"" + 1 / config.speed + "s\"\n    keyTimes=\"" + ts + "\" values=\"" + vs + "\" begin=\"" + lc.b1 + "s\"/>\n  </rect>\n</g>\n<g transform=\"translate(" + v2 + "," + v1 + ")\">\n  <rect x=\"" + lc.dp + "\" y=\"" + lc.dp + "\" width=\"" + config.blockSize + "\"\n  height=\"" + config.blockSize + "\" fill=\"" + config.c2 + "\">\n    <animateTransform attributeName=\"transform\" type=\"scale\" repeatCount=\"indefinite\" dur=\"" + 1 / config.speed + "s\"\n    keyTimes=\"" + ts + "\" values=\"" + vs + "\" begin=\"" + lc.b2 + "s\"/>\n  </rect>\n</g>\n<g transform=\"translate(" + v1 + "," + v2 + ")\">\n  <rect x=\"" + lc.dp + "\" y=\"" + lc.dp + "\" width=\"" + config.blockSize + "\"\n  height=\"" + config.blockSize + "\" fill=\"" + config.c3 + "\">\n    <animateTransform attributeName=\"transform\" type=\"scale\" repeatCount=\"indefinite\" dur=\"" + 1 / config.speed + "s\"\n    keyTimes=\"" + ts + "\" values=\"" + vs + "\" begin=\"" + lc.b4 + "s\"/>\n  </rect>\n</g>\n<g transform=\"translate(" + v2 + "," + v2 + ")\">\n  <rect x=\"" + lc.dp + "\" y=\"" + lc.dp + "\" width=\"" + config.blockSize + "\"\n  height=\"" + config.blockSize + "\" fill=\"" + config.c4 + "\">\n    <animateTransform attributeName=\"transform\" type=\"scale\" repeatCount=\"indefinite\" dur=\"" + 1 / config.speed + "s\"\n    keyTimes=\"" + ts + "\" values=\"" + vs + "\" begin=\"" + lc.b3 + "s\"/>\n  </rect>\n</g>";
      return svg;
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  if (typeof ModManager != 'undefined' && ModManager !== null) {
    ModManager.register(ret);
  }
  return ret;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}]},{},[1]);
